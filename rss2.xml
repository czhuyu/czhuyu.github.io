<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>无限进步</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Fri, 28 Jun 2019 03:11:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>leetcode-19</title>
      <link>http://yoursite.com/2019/06/17/leetcode-19/</link>
      <guid>http://yoursite.com/2019/06/17/leetcode-19/</guid>
      <pubDate>Mon, 17 Jun 2019 07:03:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 n = 2.&lt;/p&gt;
&lt;p&gt;当删除了倒数第二个节点后，链表变为 1-&amp;gt;2-&amp;gt;3-&amp;g
        
      
      </description>
      
      <content:encoded><![CDATA[<p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><p>示例：</p><p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</p><p>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.<br>说明：</p><p>给定的 n 保证是有效的。</p><p>进阶：</p><p>你能尝试使用一趟扫描实现吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>结构体定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * type ListNode struct &#123;</span><br><span class="line"> *     Val int</span><br><span class="line"> *     Next *ListNode</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">func removeNthFromEnd(head *ListNode, n int) *ListNode &#123;</span><br><span class="line">count := 1</span><br><span class="line">i := 1</span><br><span class="line">p := head</span><br><span class="line">for &#123;</span><br><span class="line">if p.Next == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125; else &#123;</span><br><span class="line">p = p.Next</span><br><span class="line">count++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if count == 1 &#123;</span><br><span class="line">var empty *ListNode</span><br><span class="line">return empty</span><br><span class="line">&#125;</span><br><span class="line">k := count - n</span><br><span class="line">if k == 0 &#123;</span><br><span class="line">return head.Next</span><br><span class="line">&#125;</span><br><span class="line">p = head</span><br><span class="line">for &#123;</span><br><span class="line">if p.Next == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if i == k &#123;</span><br><span class="line">p.Next = p.Next.Next</span><br><span class="line">break</span><br><span class="line">&#125; else &#123;</span><br><span class="line">p = p.Next</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的写法需要两次遍历才能实现，如果只能一次遍历那么关键就是如何一次遍历就能找到倒数第n个节点呢。</p><p>快慢指针—我们可以使用两个指针，两个指针始终保持n-1的距离开始遍历，当后一个指针到达链表末尾时，前一个指针就恰好是倒数第n个节点</p><p>另外我们这里需要做的是删除第n个节点，我们需要保证两个指针的距离为n。代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">func removeNthFromEnd(head *ListNode, n int) *ListNode &#123;</span><br><span class="line">p := head</span><br><span class="line">q := head</span><br><span class="line">    flag := 0</span><br><span class="line">for i := 0; i &lt; n; i++ &#123;</span><br><span class="line">        if q.Next != nil&#123;</span><br><span class="line">    q = q.Next</span><br><span class="line">            flag ++</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    if flag == n-1 &#123;</span><br><span class="line">        return p.Next</span><br><span class="line">    &#125;</span><br><span class="line">for &#123;</span><br><span class="line">if q.Next == nil &#123;</span><br><span class="line">            if p == q&#123;</span><br><span class="line">                var empty *ListNode</span><br><span class="line">        return empty</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                p.Next = p.Next.Next</span><br><span class="line">                break   </span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">q = q.Next</span><br><span class="line">p = p.Next</span><br><span class="line">&#125;</span><br><span class="line">return head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/06/17/leetcode-19/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-16</title>
      <link>http://yoursite.com/2019/06/17/leetcode-16/</link>
      <guid>http://yoursite.com/2019/06/17/leetcode-16/</guid>
      <pubDate>Mon, 17 Jun 2019 03:40:08 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。&lt;/p&gt;
&lt;p&gt;例如，给定数组 nums = [-1，2，1，-4], 和 target
        
      
      </description>
      
      <content:encoded><![CDATA[<p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p><p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum-closest" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum-closest</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">func threeSumClosest(nums []int, target int) int &#123;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">res := nums[0] + nums[1] + nums[2]</span><br><span class="line">min := math.Abs(float64(res - target))</span><br><span class="line">lenN := len(nums)</span><br><span class="line">for i := 0; i &lt; lenN; i++ &#123;</span><br><span class="line">left := i + 1</span><br><span class="line">right := lenN - 1</span><br><span class="line">for &#123;</span><br><span class="line">if left &gt;= right &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">sum := nums[i] + nums[left] + nums[right]</span><br><span class="line">temp := math.Abs(float64(sum - target))</span><br><span class="line">if temp &lt; min &#123;</span><br><span class="line">res = sum</span><br><span class="line">min = temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if sum &gt; target &amp;&amp; left &lt; right &#123;</span><br><span class="line">right --</span><br><span class="line">&#125; else if sum &lt; target &amp;&amp; left &lt; right &#123;</span><br><span class="line">left ++</span><br><span class="line">&#125; else &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/06/17/leetcode-16/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-47</title>
      <link>http://yoursite.com/2019/06/16/leetcode-47/</link>
      <guid>http://yoursite.com/2019/06/16/leetcode-47/</guid>
      <pubDate>Sun, 16 Jun 2019 07:54:49 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;给定一个可包含重复数字的序列，返回所有不重复的全排列。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: [1,1,2]&lt;br&gt;输出:&lt;br&gt;[&lt;br&gt;  [1,1,2],&lt;br&gt;  [1,2,1],&lt;br&gt;  [2,1,1]&lt;br&gt;]&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode
        
      
      </description>
      
      <content:encoded><![CDATA[<p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p><p>示例:</p><p>输入: [1,1,2]<br>输出:<br>[<br>  [1,1,2],<br>  [1,2,1],<br>  [2,1,1]<br>]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/permutations-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/permutations-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">func swap(nums []int, i int, j int) []int &#123;</span><br><span class="line">temp := nums[i]</span><br><span class="line">nums[i] = nums[j]</span><br><span class="line">nums[j] = temp</span><br><span class="line">return nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func quan(nums []int, flag int, res *[][]int) &#123;</span><br><span class="line">lenN := len(nums)</span><br><span class="line">if flag == lenN &#123;</span><br><span class="line">*res = append(*res, nums)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">for i := flag; i &lt; lenN; i++ &#123;</span><br><span class="line">if nums[i] == nums[flag] &amp;&amp; i != flag &#123;</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">swap(nums, flag, i)</span><br><span class="line">var temp = make([]int, lenN)</span><br><span class="line">copy(temp, nums)</span><br><span class="line">quan(temp, flag+1, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func permuteUnique(nums []int) [][]int &#123;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">var res [][]int</span><br><span class="line">p := &amp;res</span><br><span class="line">quan(nums, 0, p)</span><br><span class="line">return *p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/06/16/leetcode-47/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-46</title>
      <link>http://yoursite.com/2019/06/16/leetcode-46/</link>
      <guid>http://yoursite.com/2019/06/16/leetcode-46/</guid>
      <pubDate>Sun, 16 Jun 2019 07:53:59 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;给定一个没有重复数字的序列，返回其所有可能的全排列。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: [1,2,3]&lt;br&gt;输出:&lt;br&gt;[&lt;br&gt;  [1,2,3],&lt;br&gt;  [1,3,2],&lt;br&gt;  [2,1,3],&lt;br&gt;  [2,3,1],&lt;br&gt;  [3,1,2]
        
      
      </description>
      
      <content:encoded><![CDATA[<p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p><p>示例:</p><p>输入: [1,2,3]<br>输出:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/permutations" target="_blank" rel="noopener">https://leetcode-cn.com/problems/permutations</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">func swap(nums []int, i int, j int) []int &#123;</span><br><span class="line">temp := nums[i]</span><br><span class="line">nums[i] = nums[j]</span><br><span class="line">nums[j] = temp</span><br><span class="line">return nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func quan(nums []int, flag int, res *[][]int) &#123;</span><br><span class="line">lenN := len(nums)</span><br><span class="line">if flag == lenN &#123;</span><br><span class="line">*res = append(*res, nums)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">for i := flag; i &lt; lenN; i++ &#123;</span><br><span class="line">swap(nums, flag, i)</span><br><span class="line">var temp = make([]int, lenN)</span><br><span class="line">copy(temp, nums)</span><br><span class="line">quan(temp, flag+1, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func permute(nums []int) [][]int &#123;</span><br><span class="line">var res [][]int</span><br><span class="line">p := &amp;res</span><br><span class="line">quan(nums, 0, p)</span><br><span class="line">return *p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/06/16/leetcode-46/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-20</title>
      <link>http://yoursite.com/2019/06/16/leetcode-20/</link>
      <guid>http://yoursite.com/2019/06/16/leetcode-20/</guid>
      <pubDate>Sun, 16 Jun 2019 04:31:39 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。&lt;/p&gt;
&lt;p&gt;有效字符串需满足：&lt;/p&gt;
&lt;p&gt;左括号必须用相同类型的右括号闭合。&lt;br&gt;左括号必须以正确的顺序闭合。&lt;br&gt;注意空字符串可被认为是有效字符串。&lt;/p&gt;
&lt;p&gt;示
        
      
      </description>
      
      <content:encoded><![CDATA[<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><p>示例 1:</p><p>输入: “()”<br>输出: true<br>示例 2:</p><p>输入: “()[]{}”<br>输出: true<br>示例 3:</p><p>输入: “(]”<br>输出: false<br>示例 4:</p><p>输入: “([)]”<br>输出: false<br>示例 5:</p><p>输入: “{[]}”<br>输出: true</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">type stack struct &#123;</span><br><span class="line">data []string</span><br><span class="line">top  int</span><br><span class="line">size int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *stack) Push(str string) bool &#123;</span><br><span class="line">if s.top &gt; s.size &#123;</span><br><span class="line">return false</span><br><span class="line">&#125; else &#123;</span><br><span class="line">s.top++</span><br><span class="line">s.data[s.top] = str</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *stack) Pop(str string) (string, bool) &#123;</span><br><span class="line">if s.top == -1 &#123;</span><br><span class="line">return &quot;&quot;, false</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if s.data[s.top] == &quot;(&quot; &amp;&amp; str != &quot;)&quot; &#123;</span><br><span class="line">return &quot;&quot;, false</span><br><span class="line">&#125; else if s.data[s.top] == &quot;[&quot; &amp;&amp; str != &quot;]&quot; &#123;</span><br><span class="line">return &quot;&quot;, false</span><br><span class="line">&#125; else if s.data[s.top] == &quot;&#123;&quot; &amp;&amp; str != &quot;&#125;&quot; &#123;</span><br><span class="line">return &quot;&quot;, false</span><br><span class="line">&#125; else &#123;</span><br><span class="line">res := s.data[s.top]</span><br><span class="line">s.top --</span><br><span class="line">return res, true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func isValid(s string) bool &#123;</span><br><span class="line">if s == &quot;&quot; &#123;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">lenS := len(s)</span><br><span class="line">newStack1 := stack&#123;&#125;</span><br><span class="line">newStack1.top = -1</span><br><span class="line">newStack1.size = lenS</span><br><span class="line">newStack1.data = make([]string, lenS)</span><br><span class="line">var v rune</span><br><span class="line">var flag = true</span><br><span class="line">for _, v = range s &#123;</span><br><span class="line">if string(v) == &quot;(&quot; || string(v) == &quot;[&quot; || string(v) == &quot;&#123;&quot; &#123;</span><br><span class="line">newStack1.Push(string(v))</span><br><span class="line">&#125; else &#123;</span><br><span class="line">_, err := newStack1.Pop(string(v))</span><br><span class="line">if err == false &#123;</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if flag &amp;&amp; newStack1.top == -1 &#123;</span><br><span class="line">return true</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/06/16/leetcode-20/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-22</title>
      <link>http://yoursite.com/2019/06/16/leetcode-22/</link>
      <guid>http://yoursite.com/2019/06/16/leetcode-22/</guid>
      <pubDate>Sun, 16 Jun 2019 04:30:52 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。&lt;/p&gt;
&lt;p&gt;例如，给出 n = 3，生成结果为：&lt;/p&gt;
&lt;p&gt;[&lt;br&gt;  “((()))”,&lt;br&gt;  “(()())”,&lt;br&gt;  “(())()”,&lt;br&gt;  “()(()
        
      
      </description>
      
      <content:encoded><![CDATA[<p>给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</p><p>例如，给出 n = 3，生成结果为：</p><p>[<br>  “((()))”,<br>  “(()())”,<br>  “(())()”,<br>  “()(())”,<br>  “()()()”<br>]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/generate-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/generate-parentheses</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">type stack struct &#123;</span><br><span class="line">data []string</span><br><span class="line">top  int</span><br><span class="line">size int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *stack) Push(str string) bool &#123;</span><br><span class="line">if s.top &gt; s.size &#123;</span><br><span class="line">return false</span><br><span class="line">&#125; else &#123;</span><br><span class="line">s.data[s.top] = str</span><br><span class="line">s.top++</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *stack) Pop() (string, bool) &#123;</span><br><span class="line">if s.top == 0 &#123;</span><br><span class="line">return &quot;&quot;, false</span><br><span class="line">&#125; else &#123;</span><br><span class="line">res := s.data[s.top]</span><br><span class="line">s.top --</span><br><span class="line">return res, true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func swap(arr []string, i int, j int) []string &#123;</span><br><span class="line">temp := arr[i]</span><br><span class="line">arr[i] = arr[j]</span><br><span class="line">arr[j] = temp</span><br><span class="line">return arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func qz(arr []string, flag int, res *[][]string) &#123;</span><br><span class="line">lenA := len(arr)</span><br><span class="line">if flag == lenA &#123;</span><br><span class="line">*res = append(*res, arr)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">for i := flag; i &lt; lenA; i++ &#123;</span><br><span class="line">if arr[i] == arr[flag] &amp;&amp; i != flag &#123;</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">arr = swap(arr, flag, i)</span><br><span class="line">var temp = make([]string, lenA)</span><br><span class="line">copy(temp, arr)</span><br><span class="line">qz(temp, flag+1, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func generateParenthesis(n int) []string &#123;</span><br><span class="line">//size := 2 * n</span><br><span class="line">var res []string</span><br><span class="line">var quan []string</span><br><span class="line">for i := 0; i &lt; n; i++ &#123;</span><br><span class="line">quan = append(quan, &quot;(&quot;)</span><br><span class="line">&#125;</span><br><span class="line">for i := 0; i &lt; n; i++ &#123;</span><br><span class="line">quan = append(quan, &quot;)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">var quanz [][]string</span><br><span class="line">quanzAddress := &amp;quanz</span><br><span class="line"></span><br><span class="line">qz(quan, 0, quanzAddress)</span><br><span class="line">for _, k := range *quanzAddress &#123;</span><br><span class="line">i := 0</span><br><span class="line">v := &quot;&quot;</span><br><span class="line">newStack := stack&#123;&#125;</span><br><span class="line">newStack.top = 0</span><br><span class="line">newStack.size = 2 * n</span><br><span class="line">newStack.data = make([]string, newStack.size)</span><br><span class="line">for i, v = range k &#123;</span><br><span class="line">if string(v) == &quot;(&quot; &#123;</span><br><span class="line">newStack.Push(string(v))</span><br><span class="line">&#125; else &#123;</span><br><span class="line">_, err := newStack.Pop()</span><br><span class="line">if err == false &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if i == 2*n-1 &#123;</span><br><span class="line">s := &quot;&quot;</span><br><span class="line">for _, item := range k &#123;</span><br><span class="line">s += item</span><br><span class="line">&#125;</span><br><span class="line">res = append(res, s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/06/16/leetcode-22/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-17</title>
      <link>http://yoursite.com/2019/06/15/leetcode-17/</link>
      <guid>http://yoursite.com/2019/06/15/leetcode-17/</guid>
      <pubDate>Sat, 15 Jun 2019 10:03:57 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。&lt;/p&gt;
&lt;p&gt;给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-up
        
      
      </description>
      
      <content:encoded><![CDATA[<p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png" alt=""></p><p>示例:</p><p>输入：”23”<br>输出：[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>这道题主要考察的地方可以化简成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">有这样一个二维数组，他的每个单元元素个数是相同得，从它的每一个单元各取一个元素组成一个字符串数组</span><br><span class="line">$arr = [</span><br><span class="line">[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],</span><br><span class="line">[&apos;d&apos;,&apos;e&apos;,&apos;f&apos;],</span><br><span class="line">[&apos;g&apos;,&apos;h&apos;,&apos;i&apos;],</span><br><span class="line">];</span><br><span class="line">最直观的想法就是</span><br><span class="line">function test($arr)&#123;</span><br><span class="line">$res = [];</span><br><span class="line">for($i = 0;$i &lt; 3;$i++)&#123;</span><br><span class="line">for($j = 0;$j &lt; 3;$j++)&#123;</span><br><span class="line">for($k = 0;$k &lt; 3;$k++)&#123;</span><br><span class="line">$res[] = $arr[0][$i].$arr[1][$j].$arr[2][$k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return $res;</span><br><span class="line">&#125;</span><br><span class="line">三重循环 3*3*3搞定</span><br><span class="line">问题是如果数组的单元数是未知的，需要在代码里面求得长度，那么循环就不太好处理了</span><br><span class="line">而是需要一个比较通用得方法，这个时候就想到用递归来处理</span><br><span class="line">function testA($arr,$flag,&amp;$res,$s)&#123;</span><br><span class="line">$len = count($arr);</span><br><span class="line">$lenUnit = count($arr[0]);</span><br><span class="line">if($flag == $len)&#123;</span><br><span class="line">$res[] = $s;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">for ($i=0; $i &lt; $lenUnit; $i++) &#123;</span><br><span class="line">if($flag == 0)&#123;</span><br><span class="line">$s = &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">if ($flag == 1) &#123;</span><br><span class="line">$s = substr($s, 0, 1);</span><br><span class="line">&#125;</span><br><span class="line">if ($flag == 2) &#123;</span><br><span class="line">$s = substr($s, 0, 2);</span><br><span class="line">&#125;</span><br><span class="line">$s .= $arr[$flag][$i];</span><br><span class="line">testA($arr,$flag+1,$res,$s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题解如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> res []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> tmpArr []<span class="keyword">int</span></span><br><span class="line">phoneMap := [<span class="number">10</span>][<span class="number">4</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="number">2</span>: &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">""</span>&#125;,</span><br><span class="line"><span class="number">3</span>: &#123;<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">""</span>&#125;,</span><br><span class="line"><span class="number">4</span>: &#123;<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">""</span>&#125;,</span><br><span class="line"><span class="number">5</span>: &#123;<span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">""</span>&#125;,</span><br><span class="line"><span class="number">6</span>: &#123;<span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">""</span>&#125;,</span><br><span class="line"><span class="number">7</span>: &#123;<span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>&#125;,</span><br><span class="line"><span class="number">8</span>: &#123;<span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">""</span>&#125;,</span><br><span class="line"><span class="number">9</span>: &#123;<span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> digits == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">a := <span class="built_in">len</span>(digits)</span><br><span class="line">digitsInt, _ := strconv.Atoi(digits)</span><br><span class="line">paramsArr := <span class="built_in">make</span>([][<span class="number">4</span>]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> digitsInt &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">tmp := digitsInt % <span class="number">10</span></span><br><span class="line">tmpArr = <span class="built_in">append</span>(tmpArr, tmp)</span><br><span class="line">digitsInt /= <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k := a<span class="number">-1</span>; k &gt;= <span class="number">0</span>; k-- &#123;</span><br><span class="line">paramsArr = <span class="built_in">append</span>(paramsArr, phoneMap[tmpArr[k]])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resAddress := &amp;res</span><br><span class="line">recu(paramsArr, <span class="number">0</span>, <span class="string">""</span>, resAddress, a)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recu</span><span class="params">(numArr [][4]<span class="keyword">string</span>, flag <span class="keyword">int</span>, str <span class="keyword">string</span>, strAddress *[]<span class="keyword">string</span>, leng <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> flag == leng &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(str) == leng &#123;</span><br><span class="line">*strAddress = <span class="built_in">append</span>(*strAddress, str)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">0</span> &#123;</span><br><span class="line">str = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> numArr[flag][i] == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(str) &gt; <span class="number">1</span> &#123;</span><br><span class="line">str = <span class="keyword">string</span>([]<span class="keyword">byte</span>(str)[<span class="number">0</span> : <span class="built_in">len</span>(str)<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line">str += numArr[flag][i]</span><br><span class="line">recu(numArr, flag+<span class="number">1</span>, str, strAddress, leng)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/06/15/leetcode-17/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一些经验</title>
      <link>http://yoursite.com/2019/06/11/%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/</link>
      <guid>http://yoursite.com/2019/06/11/%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/</guid>
      <pubDate>Tue, 11 Jun 2019 07:25:42 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;一些经验&quot;&gt;&lt;a href=&quot;#一些经验&quot; class=&quot;headerlink&quot; title=&quot;一些经验&quot;&gt;&lt;/a&gt;一些经验&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.mysql的字段类型int(3)和int(4)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面是官方文档的解释&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="一些经验"><a href="#一些经验" class="headerlink" title="一些经验"></a>一些经验</h2><p><strong>1.mysql的字段类型int(3)和int(4)</strong></p><p>下面是官方文档的解释</p><p>11.2.5 Numeric Type Attributes</p><p>MySQL supports an extension for optionally specifying the display width of integer data types in<br>parentheses following the base keyword for the type. For example, INT(4) specifies an INT with a<br>display width of four digits. This optional display width may be used by applications to display integer<br>values having a width less than the width specified for the column by left-padding them with spaces.<br>(That is, this width is present in the metadata returned with result sets. Whether it is used is up to the<br>application.)<br>The display width does not constrain the range of values that can be stored in the column. Nor does<br>it prevent values wider than the column display width from being displayed correctly. For example, a<br>column specified as SMALLINT(3) has the usual SMALLINT range of -32768 to 32767, and values<br>outside the range permitted by three digits are displayed in full using more than three digits.<br>When used in conjunction with the optional (nonstandard) ZEROFILL attribute, the default padding of<br>spaces is replaced with zeros. For example, for a column declared as INT(4) ZEROFILL, a value of 5<br>is retrieved as 0005.</p><p>这里的意思大概就是后面的数值代表的是一个显示宽度，当配合zerofill使用时，如果存储1到该字段中，int(3)会返回001而int(4)会返回0001</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc sss;</span><br><span class="line">+-------+--------------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type                     | Null | Key | Default | Extra          |</span><br><span class="line">+-------+--------------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11) unsigned         | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| test3 | int(3) unsigned zerofill | NO   |     | NULL    |                |</span><br><span class="line">| test4 | int(4) unsigned zerofill | NO   |     | NULL    |                |</span><br><span class="line">+-------+--------------------------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from sss;</span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | test3 | test4 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 |   001 |  0001 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>需要注意的是，如果使用navicat这个可视化工具来测试这个的话test3和tes4都会返回1而没有填充的0，不知道是bug还是feature.</p><p><strong>2.会输出什么？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo $_COOKIE[&apos;username&apos;];</span><br><span class="line">    setcookie(&quot;username&quot;, 111, time()+5);</span><br></pre></td></tr></table></figure><p>第一次请求的结果输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Notice: Undefined index: username in xxx.php on line 2</span><br></pre></td></tr></table></figure><p>倒过来呢？</p><pre><code>&lt;?php    setcookie(&quot;username&quot;, 111, time()+5);    echo $_COOKIE[&apos;username&apos;];</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">结果肯定是一样的，为什么？因为输出和setcookie在同一个php文件里面，这次会在响应头里面有set-cookie告诉浏览器存储这个cookie，而只有下次请求过来的时候php才会把请求头里面的cookie装到$_COOKIE变量里面，所以这两种情况输出的$_COOKIE都会是一个空数组，文档中也有这样一句描述：</span><br><span class="line">一旦设置 Cookie 后，下次打开页面时可以使用 $_COOKIE 读取。 Cookie 值同样也存在于 $_REQUEST。</span><br></pre></td></tr></table></figure><p>文档中还有这样一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie() 定义了 Cookie，会和剩下的 HTTP 头一起发送给客户端。 和其他 HTTP 头一样，必须在脚本产生任意输出之前发送 Cookie（由于协议的限制）。 请在产生任何输出之前（包括 &lt;html&gt; 和 &lt;head&gt; 或者空格）调用本函数。</span><br></pre></td></tr></table></figure><p>但是在测试过程中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo 111;</span><br><span class="line">setcookie(&quot;username&quot;, 111, time()+5);</span><br></pre></td></tr></table></figure><p>上面这个代码的输出并没有什么异常，cookie的设置也成功了。查阅资料发现跟php.ini里面的缓冲区设置有关</p><p>php默认设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output_buffering = 4096</span><br></pre></td></tr></table></figure><p>把ini中的output_buffering设置为0，就是不缓冲输出，返回如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">111</span><br><span class="line">Warning: Cannot modify header information - headers already sent by (output started at index.php:2) in index.php on line 3</span><br></pre></td></tr></table></figure><p>只有buffer写满时，才会发送到浏览器。也就是说缓冲区超过4k就会发送到浏览器，如果设置为0，那就没有缓冲区，出现了第一个echo的时候http包已经发送出去了。所以setcookie里面的信息是没有在response header里面的</p><p>还有其他办法吗？</p><p>ob_start()，这样超过设置的缓冲大小也不会立即发送到浏览器，这样就会当脚本运行完成，或者调用了ob_flush等清空缓冲区方法之后，才会输出到浏览器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ob_start();</span><br><span class="line">echo 111;</span><br><span class="line">setcookie(&quot;username&quot;, 111, time()+5);</span><br><span class="line">ob_flush();</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/06/11/%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>php中的数组和hash表</title>
      <link>http://yoursite.com/2019/06/02/php%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8Chash%E8%A1%A8/</link>
      <guid>http://yoursite.com/2019/06/02/php%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8Chash%E8%A1%A8/</guid>
      <pubDate>Sun, 02 Jun 2019 09:50:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;php中的数组和hash表&quot;&gt;&lt;a href=&quot;#php中的数组和hash表&quot; class=&quot;headerlink&quot; title=&quot;php中的数组和hash表&quot;&gt;&lt;/a&gt;php中的数组和hash表&lt;/h2&gt;&lt;p&gt;什么是hash表&lt;/p&gt;
&lt;p&gt;根据设定的哈希函数H
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="php中的数组和hash表"><a href="#php中的数组和hash表" class="headerlink" title="php中的数组和hash表"></a>php中的数组和hash表</h2><p>什么是hash表</p><p>根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称作哈希表，这一映像过程称为哈希造表或散列，所得存储位置称哈希地址。</p><p>怎么理解呢？为什么需要这样一个结构呢？</p><p>举个例子，我们有一个一维数组来存储34个省份的各种信息，假设存储时候他的key我们如果设置成省份的名称，那么我们就需要a[33]来存储所有的省份</p><table><thead><tr><th>省份</th><th>北京</th><th>上海</th><th>四川</th><th>…</th><th>广东</th></tr></thead><tbody><tr><td>天气</td><td>晴</td><td>晴</td><td>晴</td><td>…</td><td>晴</td></tr><tr><td>总人口</td><td>xxx人</td><td>xxx人</td><td>xxx人</td><td>…</td><td>xxx人</td></tr></tbody></table><p>那么我们如果想找到四川的信息那我们就得从第一个a[0]的key开始比较直到找到a[x]的key == “四川”,然后取出a[x]里面所保存的内容。hash表怎么做呢？我们通过某个hash函数f(key)把四川转成某个数字来作为它在数组中存储的key，那当我们需要查找它时就直接f(四川)就知道它在数组中的位置，然后使用a[f(四川)]就能够取出来四川下所保存的信息，相当于我们没有经过任何的比较就查找到了四川的所有信息，当然这是理想情况，因为hash函数一定能把每个省份的名称映射成一个单独的key并且不重复不产生冲突吗？如果仅仅为了不重复造成了不能均匀地分布到地址集合中造成空间浪费呢？</p><p>从定义中我们可以看到hash函数和处理冲突的方法就是hash表的核心</p><p><strong>hash函数</strong></p><p>构造hash函数的方法很多，什么是好的hash函数呢？应该说在能够把关键字集合均匀地映射到整个地址区间，有效减少冲突的函数就是好的hash函数。</p><p>构造hash函数的方法有很多：直接定址法/数字分析法/平方取中法/折叠法/除留余数法随机数法</p><p>在php中hash函数被称作DJBX33A (Daniel J. Bernstein, Times 33 with Addition)</p><p>具体实现如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">static inline ulong zend_inline_hash_func(const char *arKey, uint nKeyLength)</span><br><span class="line">&#123;</span><br><span class="line">register ulong hash = 5381;</span><br><span class="line"></span><br><span class="line">/* variant with the hash unrolled eight times */</span><br><span class="line">for (; nKeyLength &gt;= 8; nKeyLength -= 8) &#123;</span><br><span class="line">hash = ((hash &lt;&lt; 5) + hash) + *arKey++;</span><br><span class="line">hash = ((hash &lt;&lt; 5) + hash) + *arKey++;</span><br><span class="line">hash = ((hash &lt;&lt; 5) + hash) + *arKey++;</span><br><span class="line">hash = ((hash &lt;&lt; 5) + hash) + *arKey++;</span><br><span class="line">hash = ((hash &lt;&lt; 5) + hash) + *arKey++;</span><br><span class="line">hash = ((hash &lt;&lt; 5) + hash) + *arKey++;</span><br><span class="line">hash = ((hash &lt;&lt; 5) + hash) + *arKey++;</span><br><span class="line">hash = ((hash &lt;&lt; 5) + hash) + *arKey++;</span><br><span class="line">&#125;</span><br><span class="line">switch (nKeyLength) &#123;</span><br><span class="line">case 7: hash = ((hash &lt;&lt; 5) + hash) + *arKey++; /* fallthrough... */</span><br><span class="line">case 6: hash = ((hash &lt;&lt; 5) + hash) + *arKey++; /* fallthrough... */</span><br><span class="line">case 5: hash = ((hash &lt;&lt; 5) + hash) + *arKey++; /* fallthrough... */</span><br><span class="line">case 4: hash = ((hash &lt;&lt; 5) + hash) + *arKey++; /* fallthrough... */</span><br><span class="line">case 3: hash = ((hash &lt;&lt; 5) + hash) + *arKey++; /* fallthrough... */</span><br><span class="line">case 2: hash = ((hash &lt;&lt; 5) + hash) + *arKey++; /* fallthrough... */</span><br><span class="line">case 1: hash = ((hash &lt;&lt; 5) + hash) + *arKey++; break;</span><br><span class="line">case 0: break;</span><br><span class="line">EMPTY_SWITCH_DEFAULT_CASE()</span><br><span class="line">&#125;</span><br><span class="line">return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unsigned int DJBHash(char *str)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int hash = 5381;</span><br><span class="line"> </span><br><span class="line">    while (*str)</span><br><span class="line">    &#123;</span><br><span class="line">        hash += (hash &lt;&lt; 5) + (*str++);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return (hash &amp; 0x7FFFFFFF);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个字符串的key经过这个函数之后会返回一个无符号的整型，这个无符号整型就是php会真正存储使用到的key.</p><p><strong>处理冲突</strong></p><p>冲突可以减少，但是不能避免，所以还必须有处理冲突的方法</p><p>开放定址法/再hash法/链地址法</p><p>php中采用的是链地址法</p><p>如果冲突太多怎么办？或者恶意冲突呢？在鸟哥的blog里有一篇关于hash冲突的示例</p><p><a href="http://www.laruence.com/2011/12/30/2435.html" target="_blank" rel="noopener">http://www.laruence.com/2011/12/30/2435.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$size = pow(2, 16);</span><br><span class="line"> </span><br><span class="line">$startTime = microtime(true);</span><br><span class="line">$array = array();</span><br><span class="line">for ($key = 0, $maxKey = ($size - 1) * $size; $key &lt;= $maxKey; $key += $size) &#123;</span><br><span class="line">    $array[$key] = 0;</span><br><span class="line">&#125;</span><br><span class="line">$endTime = microtime(true);</span><br><span class="line">echo &apos;插入 &apos;, $size, &apos; 个恶意的元素需要 &apos;, $endTime - $startTime, &apos; 秒&apos;, &quot;\n&quot;;</span><br><span class="line"> </span><br><span class="line">$startTime = microtime(true);</span><br><span class="line">$array = array();</span><br><span class="line">for ($key = 0, $maxKey = $size - 1; $key &lt;= $maxKey; ++$key) &#123;</span><br><span class="line">    $array[$key] = 0;</span><br><span class="line">&#125;</span><br><span class="line">$endTime = microtime(true);</span><br><span class="line">echo &apos;插入 &apos;, $size, &apos; 个普通元素需要 &apos;, $endTime - $startTime, &apos; 秒&apos;, &quot;\n&quot;;</span><br></pre></td></tr></table></figure><p>在我的机器上面运行得到了下面这个结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">插入 65536 个恶意的元素需要 29.219798088074 秒</span><br><span class="line">插入 65536 个普通元素需要 0.014147996902466 秒</span><br></pre></td></tr></table></figure><p>可以看到差距确实是很明显的，具体原因就是每个需要插入的key都会产生hash冲突最后整个hash表变成了一个链表。由于这个链表会保持有序，所以每当下一个元素需要插入时，就要遍历去找它应该插入该到链表的那个位置造成了这个问题，而且需要遍历的节点个数是越来越多的。</p><p><strong>php hash表结构图示</strong></p><p><img src="http://www.php-internals.com/images/book/chapt03/03-01-02-zend_hashtable.png" alt=""></p><p>上图来自网络，侵删。</p><p>这张图比较清晰的展示了你如果在php中hash表的存储结构。</p><p>最左侧是hash表的结构体内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _hashtable &#123;</span><br><span class="line">uint nTableSize;</span><br><span class="line">uint nTableMask;</span><br><span class="line">uint nNumOfElements;</span><br><span class="line">ulong nNextFreeElement;</span><br><span class="line">Bucket *pInternalPointer;/* Used for element traversal */</span><br><span class="line">Bucket *pListHead;</span><br><span class="line">Bucket *pListTail;</span><br><span class="line">Bucket **arBuckets;</span><br><span class="line">dtor_func_t pDestructor;</span><br><span class="line">zend_bool persistent;</span><br><span class="line">unsigned char nApplyCount;</span><br><span class="line">zend_bool bApplyProtection;</span><br><span class="line">#if ZEND_DEBUG</span><br><span class="line">int inconsistent;</span><br><span class="line">#endif</span><br><span class="line">&#125; HashTable;</span><br></pre></td></tr></table></figure><p>左二列就是上面描述的连续的地址区间，这里面所存储的都是Bucket类型的指针，保存的当然就是每个Bucket的地址。</p><p>Bucket就是保存数据的单元</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedef struct bucket &#123;</span><br><span class="line">ulong h;/* Used for numeric indexing */</span><br><span class="line">uint nKeyLength;</span><br><span class="line">void *pData;</span><br><span class="line">void *pDataPtr;</span><br><span class="line">struct bucket *pListNext;</span><br><span class="line">struct bucket *pListLast;</span><br><span class="line">struct bucket *pNext;</span><br><span class="line">struct bucket *pLast;</span><br><span class="line">const char *arKey;</span><br><span class="line">&#125; Bucket;</span><br></pre></td></tr></table></figure><p>从图中或者从结构体定义中我们可以看到hash表结构体和Bucket结构体定义了很多指针或者是变量来存储Bucket相关的信息或者跟hash表相关的信息。</p><p>回到图中，在Bucket1插入之前，php先初始化了_hashtable这样一个结构体，初始化了一个连续的地址空间，里面保存的都是空指针，并且把Bucket **arBuckets;指向指针类型的指针指向了这个连续地址区间的第一个元素的地址。在实际的将这个元素保存到hash表的过程中，先根据hash函数确定了Bucket1应该存储到地址为1的这个位置，于是把地址为1的空指针指向了bucket1，然后插入Bucket2，由于hash函数Bucket2的key对应的地址也是1，一般来说在每个链hash key的值相同的链表中也是要保持关键词有序的，因为方便查找和添加，于是根据关键词的升序或者降序确定了Bucket2应当插入到Bucket1的前面。把Bucket2的pNext指向了Bucket1，把地址为1的指针执行了Bucket2，Bucket3和Bucket1插入的方式同理。</p><p>这里只是简要描述了插入的过程而没有说明每一个变量的改变和指针的改变，不然流程太长了。</p><p>Bucket里保存的信息的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ulong h;/* Used for numeric indexing */ 这里php源码注释说会用到索引数字类型的时候</span><br><span class="line">uint nKeyLength;        key的长度          </span><br><span class="line">void *pData;data相关</span><br><span class="line">void *pDataPtr;data相关</span><br><span class="line">struct bucket *pListNext; 在整个hashtable中按插入先后顺序的下一个bucket地址</span><br><span class="line">struct bucket *pListLast; 在整个hashtable中按插入先后顺序的上一个bucket地址</span><br><span class="line">struct bucket *pNext;  在key的hash结果相同的链表中下一个bucket的地址</span><br><span class="line">struct bucket *pLast;  在key的hash结果相同的链表中上一个bucket的地址</span><br><span class="line">const char *arKey;    key</span><br></pre></td></tr></table></figure><p>可以看到php的hashtable维护了很多的双向链表，一个是key相同的时候的双向链表，一个是整个hashtable顺序的双向链表，为什么要这么设计呢？</p><p>hashtable的链表应该是用于遍历的</p><p>而每个hash f(k)相等的时候的链表应该就是服务于元素的增删改查。</p><p>再看hashtable里面存储的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">uint nTableSize;</span><br><span class="line">uint nTableMask;</span><br><span class="line">uint nNumOfElements;</span><br><span class="line">ulong nNextFreeElement;</span><br><span class="line">Bucket *pInternalPointer;/* Used for element traversal */ 这里php源码注释说会用到元素遍历的时候</span><br><span class="line">Bucket *pListHead;</span><br><span class="line">Bucket *pListTail;</span><br><span class="line">Bucket **arBuckets;</span><br><span class="line">dtor_func_t pDestructor;</span><br><span class="line">zend_bool persistent;</span><br><span class="line">unsigned char nApplyCount;</span><br><span class="line">zend_bool bApplyProtection;</span><br></pre></td></tr></table></figure><p>这里面保存的变量就跟php数组的操作函数有关系了</p><p>当我们使用foreach()来遍历输出一个数组时，他会按照元素的添加先后顺序来输出，怎么做到的呢？Bucket *pInternalPointer;这个指针的作用就体现出来了,首先他的值会跟pListHead一样指向第一个添加的Bucket的地址，然后输出就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print pInternalPointer-&gt;pData-&gt;pDataPtr</span><br></pre></td></tr></table></figure><p>输出下一个元素呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pInternalPointer = pInternalPointer-&gt;pListNext</span><br><span class="line">print pInternalPointer-&gt;pData-&gt;pDataPtr</span><br></pre></td></tr></table></figure><p>一直到*pInternalPointer-&gt;pListNext为null的时候数组遍历就完成了，其他的一些函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reset() pInternalPointer = pListHead</span><br><span class="line">end() pInternalPointer = pListTail</span><br><span class="line">next() pInternalPointer = pInternalPointer-&gt;pListNext</span><br><span class="line">prev() pInternalPointer = pInternalPointer-&gt;pListLast</span><br><span class="line">current() pInternalPointer</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/06/02/php%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8Chash%E8%A1%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>查找和排序算法</title>
      <link>http://yoursite.com/2019/05/31/%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <guid>http://yoursite.com/2019/05/31/%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <pubDate>Fri, 31 May 2019 14:14:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;查找和排序算法&quot;&gt;&lt;a href=&quot;#查找和排序算法&quot; class=&quot;headerlink&quot; title=&quot;查找和排序算法&quot;&gt;&lt;/a&gt;查找和排序算法&lt;/h2&gt;&lt;h4 id=&quot;查找算法&quot;&gt;&lt;a href=&quot;#查找算法&quot; class=&quot;headerlink&quot; titl
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="查找和排序算法"><a href="#查找和排序算法" class="headerlink" title="查找和排序算法"></a>查找和排序算法</h2><h4 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h4><p>1.顺序查找</p><p>2.二分查找</p><p>循环实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function midSearch($k,$arr)&#123;</span><br><span class="line">$left = 0;</span><br><span class="line">$right = count($arr);</span><br><span class="line">while($left &lt; $right)&#123;</span><br><span class="line">$mid = floor(($left + $right)/2);</span><br><span class="line">if($arr[$mid] == $k)&#123;</span><br><span class="line">return $mid;</span><br><span class="line">&#125;else if($arr[$mid] &gt; $k)&#123;</span><br><span class="line">$right = $mid - 1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$left = $mid + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function binSearch($arr,$left,$right,$key)&#123;</span><br><span class="line">if($left &gt; $right)&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$mid = floor(($left+$right)/2);</span><br><span class="line">if($key == $arr[$mid])&#123;</span><br><span class="line">return $mid;</span><br><span class="line">&#125;elseif ($key &lt; $arr[$mid]) &#123;</span><br><span class="line">$right = $mid - 1;</span><br><span class="line">return binSearch($arr,$left,$right,$key);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$left = $mid + 1;</span><br><span class="line">return binSearch($arr,$left,$right,$key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><p><strong>一.内部排序</strong></p><p>先定义一百个0-100整数元素组成的随机数数组和交换函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$n = 100;</span><br><span class="line">$a = [];</span><br><span class="line"></span><br><span class="line">for ($i=0; $i &lt; $n; $i++) &#123; </span><br><span class="line">$a[] = rand(0,$n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function swap(&amp;$arr,$i,$j)&#123;</span><br><span class="line">$temp = $arr[$i];</span><br><span class="line">$arr[$i] = $arr[$j];</span><br><span class="line">$arr[$j] = $temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.冒泡排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort($arr)&#123;</span><br><span class="line">$n = count($arr);</span><br><span class="line">for($i = 0; $i &lt; $n-1; $i++)&#123;</span><br><span class="line">for($j = 0;$j &lt; $n-1-$i; $j++)&#123;</span><br><span class="line">if($arr[$j] &gt; $arr[$j+1])&#123;</span><br><span class="line">swap($arr,$j,$j+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return $arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.选择排序</p><p>简单选择排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function selectSort($arr)&#123;</span><br><span class="line">$n = count($arr);</span><br><span class="line">for($i = 0; $i &lt; $n-1; $i++)&#123;</span><br><span class="line">$minKey = $i;</span><br><span class="line">for($j = $i;$j &lt; $n; $j++)&#123;</span><br><span class="line">if($arr[$j] &lt; $arr[$minKey])&#123;</span><br><span class="line">$minKey = $j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if($i != $minKey)&#123;</span><br><span class="line">swap($arr,$i,$minKey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return $arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树形选择排序/堆排序</p><p>3.插入排序</p><p>直接插入排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function insertSort($arr)&#123;</span><br><span class="line">$n = count($arr);</span><br><span class="line">for($i = 1; $i &lt; $n; $i++)&#123;</span><br><span class="line">if($arr[$i] &lt; $arr[$i-1])&#123;</span><br><span class="line">$temp = $arr[$i];</span><br><span class="line">$j = $i - 1; </span><br><span class="line">for($j;$j&gt;=0 &amp;&amp; $arr[$j] &gt; $temp;$j--)&#123;</span><br><span class="line">$arr[$j+1] = $arr[$j];</span><br><span class="line">&#125;</span><br><span class="line">$arr[$j+1] = $temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return $arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他插入排序/希尔排序</p><p>4.快速排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function qsort(&amp;$arr, $left, $right)&#123;</span><br><span class="line">if($left &gt; $right)&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$i = $left;</span><br><span class="line">$k = $left;</span><br><span class="line">$j = $right;</span><br><span class="line"></span><br><span class="line">while($i &lt; $j)&#123;</span><br><span class="line">while($arr[$j] &gt;= $arr[$k] &amp;&amp; $i &lt; $j) $j--;</span><br><span class="line">swap($arr,$j,$k);</span><br><span class="line">$k = $j;</span><br><span class="line"></span><br><span class="line">while($arr[$i] &lt;= $arr[$k] &amp;&amp; $i &lt; $j) $i++;</span><br><span class="line">swap($arr,$i,$k);</span><br><span class="line">$k = $i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">qsort($arr, $left, $k-1);</span><br><span class="line">qsort($arr, $k+1, $right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$n = count($a);</span><br><span class="line">qsort($a, 0, $n-1);</span><br></pre></td></tr></table></figure><p>5.归并排序</p><p>6.基数排序</p><p>多关键字排序/链式基数排序</p><p><strong>二.外部排序</strong></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/31/%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>php-cli</title>
      <link>http://yoursite.com/2019/05/27/php-cli/</link>
      <guid>http://yoursite.com/2019/05/27/php-cli/</guid>
      <pubDate>Mon, 27 May 2019 14:26:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;PHP-CLI&quot;&gt;&lt;a href=&quot;#PHP-CLI&quot; class=&quot;headerlink&quot; title=&quot;PHP-CLI&quot;&gt;&lt;/a&gt;PHP-CLI&lt;/h2&gt;&lt;p&gt;在命令行输入 php -r “echo 111;” 就可以运行php代码并在控制台得到111的输出，
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="PHP-CLI"><a href="#PHP-CLI" class="headerlink" title="PHP-CLI"></a>PHP-CLI</h2><p>在命令行输入 php -r “echo 111;” 就可以运行php代码并在控制台得到111的输出，那这中间经历了哪些步骤呢？</p><p>从php的github项目中你可以下载到各个版本的源码，这里以5.6.40版本为例</p><p>php在命令行的处理源文件在{PHPSRC}/sapi/php_cli.c中</p><p>首先跟到main函数(在约1203行)</p><p>1378行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zend_first_try &#123;</span><br><span class="line">#ifndef PHP_CLI_WIN32_NO_CONSOLE</span><br><span class="line">if (sapi_module == &amp;cli_sapi_module) &#123;</span><br><span class="line">#endif</span><br><span class="line">exit_status = do_cli(argc, argv TSRMLS_CC);</span><br><span class="line">#ifndef PHP_CLI_WIN32_NO_CONSOLE</span><br><span class="line">&#125; else &#123;</span><br><span class="line">exit_status = do_cli_server(argc, argv TSRMLS_CC);</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">&#125; zend_end_try();</span><br></pre></td></tr></table></figure><p>这里的do_cli就是具体的实现了，跟到do_cli函数681行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">static int do_cli(int argc, char **argv TSRMLS_DC) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">int c;</span><br><span class="line">......</span><br><span class="line">char *php_optarg = NULL, *orig_optarg = NULL;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">zend_try &#123;</span><br><span class="line"></span><br><span class="line">CG(in_compilation) = 0; /* not initialized but needed for several options */</span><br><span class="line">EG(uninitialized_zval_ptr) = NULL;</span><br><span class="line"></span><br><span class="line">while ((c = php_getopt(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, 0, 2)) != -1) &#123;</span><br><span class="line">zend_try &#123;</span><br><span class="line"></span><br><span class="line">CG(in_compilation) = 0; /* not initialized but needed for several options */</span><br><span class="line">EG(uninitialized_zval_ptr) = NULL;</span><br><span class="line"></span><br><span class="line">while ((c = php_getopt(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, 0, 2)) != -1) &#123;</span><br><span class="line">switch (c) &#123;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">case &apos;v&apos;: /* show php version &amp; quit */</span><br><span class="line">php_printf(&quot;PHP %s (%s) (built: %s %s) %s\nCopyright (c) 1997-2016 The PHP Group\n%s&quot;,</span><br><span class="line">PHP_VERSION, cli_sapi_module.name, __DATE__, __TIME__,</span><br><span class="line">#if ZEND_DEBUG &amp;&amp; defined(HAVE_GCOV)</span><br><span class="line">&quot;(DEBUG GCOV)&quot;,</span><br><span class="line">#elif ZEND_DEBUG</span><br><span class="line">&quot;(DEBUG)&quot;,</span><br><span class="line">#elif defined(HAVE_GCOV)</span><br><span class="line">&quot;(GCOV)&quot;,</span><br><span class="line">#else</span><br><span class="line">&quot;&quot;,</span><br><span class="line">#endif</span><br><span class="line">get_zend_version()</span><br><span class="line">);</span><br><span class="line">sapi_deactivate(TSRMLS_C);</span><br><span class="line">goto out;</span><br><span class="line"></span><br><span class="line">            ......</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Set some CLI defaults */</span><br><span class="line">SG(options) |= SAPI_OPTION_NO_CHDIR;</span><br><span class="line"></span><br><span class="line">php_optind = orig_optind;</span><br><span class="line">php_optarg = orig_optarg;</span><br><span class="line">while ((c = php_getopt(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, 0, 2)) != -1) &#123;</span><br><span class="line">switch (c) &#123;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">case &apos;r&apos;: /* run code from command line */</span><br><span class="line">if (behavior == PHP_MODE_CLI_DIRECT) &#123;</span><br><span class="line">if (exec_direct || script_file) &#123;</span><br><span class="line">param_error = &quot;You can use -r only once.\n&quot;;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (behavior != PHP_MODE_STANDARD || interactive) &#123;</span><br><span class="line">param_error = param_mode_conflict;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">behavior=PHP_MODE_CLI_DIRECT;</span><br><span class="line">exec_direct=php_optarg;</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就见到了我们经常使用的php -v，然后当然还有php -r。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static int do_cli(int argc, char **argv TSRMLS_DC) /* &#123;&#123;&#123; */</span><br></pre></td></tr></table></figure><p>这里的argv就是从命令行获取到的内容,我们就跟着这个参数往下查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while ((c = php_getopt(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, 0, 2)) != -1) &#123;</span><br></pre></td></tr></table></figure><p>686行有这样一部操作，然后我们看到当解析出命令行带了-r参数的时候，最主要做了两步操作</p><pre><code>behavior=PHP_MODE_CLI_DIRECT;exec_direct=php_optarg;</code></pre><p>所以这里传递引用&amp;php_optarg应该已经赋值了</p><p>再往下看会用在什么地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case PHP_MODE_CLI_DIRECT:</span><br><span class="line">cli_register_file_handles(TSRMLS_C);</span><br><span class="line">if (zend_eval_string_ex(exec_direct, NULL, &quot;Command line code&quot;, 1 TSRMLS_CC) == FAILURE) &#123;</span><br><span class="line">exit_status=254;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br></pre></td></tr></table></figure><p>然后把参数exec_direct传给zend_eval_string_ex，这个函数的实现在zend_excute_API.c文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">ZEND_API int zend_eval_stringl(char *str, int str_len, zval *retval_ptr, char *string_name TSRMLS_DC) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">zval pv;</span><br><span class="line">zend_op_array *new_op_array;</span><br><span class="line">zend_op_array *original_active_op_array = EG(active_op_array);</span><br><span class="line">zend_uint original_compiler_options;</span><br><span class="line">int retval;</span><br><span class="line"></span><br><span class="line">if (retval_ptr) &#123;</span><br><span class="line">Z_STRLEN(pv) = str_len + sizeof(&quot;return ;&quot;) - 1;</span><br><span class="line">Z_STRVAL(pv) = emalloc(Z_STRLEN(pv) + 1);</span><br><span class="line">memcpy(Z_STRVAL(pv), &quot;return &quot;, sizeof(&quot;return &quot;) - 1);</span><br><span class="line">memcpy(Z_STRVAL(pv) + sizeof(&quot;return &quot;) - 1, str, str_len);</span><br><span class="line">Z_STRVAL(pv)[Z_STRLEN(pv) - 1] = &apos;;&apos;;</span><br><span class="line">Z_STRVAL(pv)[Z_STRLEN(pv)] = &apos;\0&apos;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">Z_STRLEN(pv) = str_len;</span><br><span class="line">Z_STRVAL(pv) = str;</span><br><span class="line">&#125;</span><br><span class="line">Z_TYPE(pv) = IS_STRING;</span><br><span class="line"></span><br><span class="line">/*printf(&quot;Evaluating &apos;%s&apos;\n&quot;, pv.value.str.val);*/</span><br><span class="line"></span><br><span class="line">original_compiler_options = CG(compiler_options);</span><br><span class="line">CG(compiler_options) = ZEND_COMPILE_DEFAULT_FOR_EVAL;</span><br><span class="line">new_op_array = zend_compile_string(&amp;pv, string_name TSRMLS_CC);</span><br><span class="line">CG(compiler_options) = original_compiler_options;</span><br><span class="line"></span><br><span class="line">if (new_op_array) &#123;</span><br><span class="line">zval *local_retval_ptr=NULL;</span><br><span class="line">zval **original_return_value_ptr_ptr = EG(return_value_ptr_ptr);</span><br><span class="line">zend_op **original_opline_ptr = EG(opline_ptr);</span><br><span class="line">int orig_interactive = CG(interactive);</span><br><span class="line"></span><br><span class="line">EG(return_value_ptr_ptr) = &amp;local_retval_ptr;</span><br><span class="line">EG(active_op_array) = new_op_array;</span><br><span class="line">EG(no_extensions)=1;</span><br><span class="line">if (!EG(active_symbol_table)) &#123;</span><br><span class="line">zend_rebuild_symbol_table(TSRMLS_C);</span><br><span class="line">&#125;</span><br><span class="line">CG(interactive) = 0;</span><br><span class="line"></span><br><span class="line">zend_try &#123;</span><br><span class="line">zend_execute(new_op_array TSRMLS_CC);</span><br><span class="line">&#125; zend_catch &#123;</span><br><span class="line">destroy_op_array(new_op_array TSRMLS_CC);</span><br><span class="line">efree(new_op_array);</span><br><span class="line">zend_bailout();</span><br><span class="line">&#125; zend_end_try();</span><br><span class="line"></span><br><span class="line">CG(interactive) = orig_interactive;</span><br><span class="line">if (local_retval_ptr) &#123;</span><br><span class="line">if (retval_ptr) &#123;</span><br><span class="line">COPY_PZVAL_TO_ZVAL(*retval_ptr, local_retval_ptr);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">zval_ptr_dtor(&amp;local_retval_ptr);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if (retval_ptr) &#123;</span><br><span class="line">INIT_ZVAL(*retval_ptr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EG(no_extensions)=0;</span><br><span class="line">EG(opline_ptr) = original_opline_ptr;</span><br><span class="line">EG(active_op_array) = original_active_op_array;</span><br><span class="line">destroy_op_array(new_op_array TSRMLS_CC);</span><br><span class="line">efree(new_op_array);</span><br><span class="line">EG(return_value_ptr_ptr) = original_return_value_ptr_ptr;</span><br><span class="line">retval = SUCCESS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">retval = FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">if (retval_ptr) &#123;</span><br><span class="line">zval_dtor(&amp;pv);</span><br><span class="line">&#125;</span><br><span class="line">return retval;</span><br><span class="line">&#125;</span><br><span class="line">/* &#125;&#125;&#125; */</span><br><span class="line"></span><br><span class="line">ZEND_API int zend_eval_string(char *str, zval *retval_ptr, char *string_name TSRMLS_DC) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">return zend_eval_stringl(str, strlen(str), retval_ptr, string_name TSRMLS_CC);</span><br><span class="line">&#125;</span><br><span class="line">/* &#125;&#125;&#125; */</span><br><span class="line"></span><br><span class="line">ZEND_API int zend_eval_stringl_ex(char *str, int str_len, zval *retval_ptr, char *string_name, int handle_exceptions TSRMLS_DC) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">int result;</span><br><span class="line"></span><br><span class="line">result = zend_eval_stringl(str, str_len, retval_ptr, string_name TSRMLS_CC);</span><br><span class="line">if (handle_exceptions &amp;&amp; EG(exception)) &#123;</span><br><span class="line">zend_exception_error(EG(exception), E_ERROR TSRMLS_CC);</span><br><span class="line">result = FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">/* &#125;&#125;&#125; */</span><br></pre></td></tr></table></figure><p>可以看到最后执行的函数就是最上面的zend_eval_stringl</p><p>Z_STRVAL(pv) = str;</p><p>new_op_array = zend_compile_string(&amp;pv, string_name TSRMLS_CC);</p><p>经过词法分析/语法分析</p><p>这里得到的new_op_array应该就是包含了opcode的了</p><p>有一些比较眼熟的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zend_op_array 这里面会存放需要执行的opcode</span><br><span class="line">EG 和代码的解释相关</span><br><span class="line">CG 和代码的执行相关</span><br><span class="line">zval_dtor</span><br><span class="line">zval_ptr_dtor</span><br></pre></td></tr></table></figure><p>EG 和 CG的定义可以在zend_globals_macros.h中可以找到 macro 宏指令的意思，这里就是C语言里面的特性了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* Compiler */</span><br><span class="line">#ifdef ZTS</span><br><span class="line"># define CG(v) TSRMG(compiler_globals_id, zend_compiler_globals *, v)</span><br><span class="line">int zendparse(void *compiler_globals);</span><br><span class="line">#else</span><br><span class="line"># define CG(v) (compiler_globals.v)</span><br><span class="line">extern ZEND_API struct _zend_compiler_globals compiler_globals;</span><br><span class="line">int zendparse(void);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* Executor */</span><br><span class="line">#ifdef ZTS</span><br><span class="line"># define EG(v) TSRMG(executor_globals_id, zend_executor_globals *, v)</span><br><span class="line">#else</span><br><span class="line"># define EG(v) (executor_globals.v)</span><br><span class="line">extern ZEND_API zend_executor_globals executor_globals;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>zval_dtor和zval_ptr_dtor，我们使用一个unset操作想清除这个变量所占的内存时（可能只是引用计数减一），会从当前符号的哈希表中删除变量名对应的项， 在所有的操作执行完后，并对从符号表中删除的项调用一个析构函数，临时变量会调用zval_dtor，一般的变量会调用zval_ptr_dtor。</p><p>zval_ptr_dtor会做的事情就是：如果变量的引用计数为1，即减一后引用计数为0，直接清除变量。如果当前变量如果被缓存，则需要清除缓存；如果变量的引用计数大于1，即减一后引用计数大于0，则将变量放入垃圾列表。如果变量存在引用，则去掉其引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zend_try &#123;</span><br><span class="line">zend_execute(new_op_array TSRMLS_CC);</span><br><span class="line">&#125; zend_catch &#123;</span><br><span class="line">destroy_op_array(new_op_array TSRMLS_CC);</span><br><span class="line">efree(new_op_array);</span><br><span class="line">zend_bailout();</span><br><span class="line">&#125; zend_end_try();</span><br></pre></td></tr></table></figure><p>这里zend_execute(new_op_array TSRMLS_CC);肯定就是执行new_op_array里面的opcode了。</p><p>跟到{PHPSRC}/Zend/zend_vm_execute.h：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">ZEND_API void execute_ex(zend_execute_data *execute_data TSRMLS_DC)</span><br><span class="line">&#123;</span><br><span class="line">DCL_OPLINE</span><br><span class="line">zend_bool original_in_execution;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">original_in_execution = EG(in_execution);</span><br><span class="line">EG(in_execution) = 1;</span><br><span class="line"></span><br><span class="line">if (0) &#123;</span><br><span class="line">zend_vm_enter:</span><br><span class="line">execute_data = i_create_execute_data_from_op_array(EG(active_op_array), 1 TSRMLS_CC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LOAD_REGS();</span><br><span class="line">LOAD_OPLINE();</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">    int ret;</span><br><span class="line">#ifdef ZEND_WIN32</span><br><span class="line">if (EG(timed_out)) &#123;</span><br><span class="line">zend_timeout(0);</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">if ((ret = OPLINE-&gt;handler(execute_data TSRMLS_CC)) &gt; 0) &#123;</span><br><span class="line">switch (ret) &#123;</span><br><span class="line">case 1:</span><br><span class="line">EG(in_execution) = original_in_execution;</span><br><span class="line">return;</span><br><span class="line">case 2:</span><br><span class="line">goto zend_vm_enter;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">execute_data = EG(current_execute_data);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">zend_error_noreturn(E_ERROR, &quot;Arrived at end of main loop which shouldn&apos;t happen&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZEND_API void zend_execute(zend_op_array *op_array TSRMLS_DC)</span><br><span class="line">&#123;</span><br><span class="line">if (EG(exception)) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125; </span><br><span class="line">zend_execute_ex(i_create_execute_data_from_op_array(op_array, 0 TSRMLS_CC) TSRMLS_CC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过while(1)来执行从op_array里拿到的opcode进行执行。</p><p>opcode长什么样子呢？</p><p>安装一个php扩展vld <a href="http://pecl.php.net/package/vld" target="_blank" rel="noopener">http://pecl.php.net/package/vld</a></p><p>安装扩展的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">phpize </span><br><span class="line">./configure  make &amp;&amp; make install</span><br><span class="line">把编译出来的动态链接库.so文件加到php.ini配置中</span><br><span class="line">vim /usr/local/php/etc/php.ini </span><br><span class="line">service php-fpm restart</span><br><span class="line">php -ini | grep vld</span><br><span class="line">vld</span><br><span class="line">vld support =&gt; enabled</span><br><span class="line">vld.active =&gt; 0 =&gt; 0</span><br><span class="line">vld.col_sep =&gt;  =&gt; </span><br><span class="line">vld.dump_paths =&gt; 1 =&gt; 1</span><br><span class="line">vld.execute =&gt; 1 =&gt; 1</span><br><span class="line">vld.format =&gt; 0 =&gt; 0</span><br><span class="line">vld.save_dir =&gt; /tmp =&gt; /tmp</span><br><span class="line">vld.save_paths =&gt; 0 =&gt; 0</span><br><span class="line">vld.skip_append =&gt; 0 =&gt; 0</span><br><span class="line">vld.skip_prepend =&gt; 0 =&gt; 0</span><br><span class="line">vld.verbosity =&gt; 1 =&gt; 1</span><br><span class="line">PWD =&gt; /usr/local/src/vld-0.14.0</span><br><span class="line">_SERVER[&quot;PWD&quot;] =&gt; /usr/local/src/vld-0.14.0</span><br></pre></td></tr></table></figure><p>看到vld support =&gt; enabled就说明安装成功了</p><p>怎么使用呢？<a href="https://derickrethans.nl/projects.html#vld" target="_blank" rel="noopener">https://derickrethans.nl/projects.html#vld</a></p><p>在命令行运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &quot;echo 1111;&quot; -dvld.active=1</span><br></pre></td></tr></table></figure><p>我们得到了这样的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1111root@czhuyu-Inspiron-5547:~# php -r &quot;echo 1111;&quot; -dvld.active=1</span><br><span class="line">Finding entry points</span><br><span class="line">Branch analysis from position: 0</span><br><span class="line">Jump found. (Code = 62) Position 1 = -2</span><br><span class="line">filename:       Command line code</span><br><span class="line">function name:  (null)</span><br><span class="line">number of ops:  2</span><br><span class="line">compiled vars:  none</span><br><span class="line">line     #* E I O op                           fetch          ext  return  operands</span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">   1     0  E &gt;   ECHO                                                     1111</span><br><span class="line">         1      &gt; RETURN                                                   null</span><br><span class="line"></span><br><span class="line">branch: #  0; line:     1-    1; sop:     0; eop:     1; out1:  -2</span><br><span class="line">path #1: 0, </span><br><span class="line">1111</span><br></pre></td></tr></table></figure><p>其中关键的部分应该就是这个op列下面的ECHO了</p><p>ECHO对应到源码中执行的操作就是ZEND_ECHO_SPEC_CONST_HANDLER</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static int ZEND_FASTCALL  ZEND_ECHO_SPEC_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS)</span><br><span class="line">&#123;</span><br><span class="line">USE_OPLINE</span><br><span class="line"></span><br><span class="line">zval *z;</span><br><span class="line"></span><br><span class="line">SAVE_OPLINE();</span><br><span class="line">z = opline-&gt;op1.zv;</span><br><span class="line"></span><br><span class="line">if (IS_CONST == IS_TMP_VAR &amp;&amp; Z_TYPE_P(z) == IS_OBJECT) &#123;</span><br><span class="line">INIT_PZVAL(z);</span><br><span class="line">&#125;</span><br><span class="line">zend_print_variable(z);</span><br><span class="line"></span><br><span class="line">CHECK_EXCEPTION();</span><br><span class="line">ZEND_VM_NEXT_OPCODE();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ZEND_API int zend_print_variable(zval *var) </span><br><span class="line">&#123;</span><br><span class="line">return zend_print_zval(var, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZEND_API int zend_print_zval(zval *expr, int indent) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">return zend_print_zval_ex(zend_write, expr, indent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ZEND_API int zend_print_zval_ex(zend_write_func_t write_func, zval *expr, int indent) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">zval expr_copy;</span><br><span class="line">int use_copy;</span><br><span class="line"></span><br><span class="line">zend_make_printable_zval(expr, &amp;expr_copy, &amp;use_copy);</span><br><span class="line">if (use_copy) &#123;</span><br><span class="line">expr = &amp;expr_copy;</span><br><span class="line">&#125;</span><br><span class="line">if (Z_STRLEN_P(expr) == 0) &#123; /* optimize away empty strings */</span><br><span class="line">if (use_copy) &#123;</span><br><span class="line">zval_dtor(expr);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">write_func(Z_STRVAL_P(expr), Z_STRLEN_P(expr));</span><br><span class="line">if (use_copy) &#123;</span><br><span class="line">zval_dtor(expr);</span><br><span class="line">&#125;</span><br><span class="line">return Z_STRLEN_P(expr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个write_func应该就是执行输出操作了</p><p>最后调用到的就是sapi_cli_single_write</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PHP_CLI_API size_t sapi_cli_single_write(const char *str, uint str_length TSRMLS_DC) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">#ifdef PHP_WRITE_STDOUT</span><br><span class="line">long ret;</span><br><span class="line">#else</span><br><span class="line">size_t ret;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">if (cli_shell_callbacks.cli_shell_write) &#123;</span><br><span class="line">size_t shell_wrote;</span><br><span class="line">shell_wrote = cli_shell_callbacks.cli_shell_write(str, str_length TSRMLS_CC);</span><br><span class="line">if (shell_wrote &gt; -1) &#123;</span><br><span class="line">return shell_wrote;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#ifdef PHP_WRITE_STDOUT</span><br><span class="line">do &#123;</span><br><span class="line">ret = write(STDOUT_FILENO, str, str_length);</span><br><span class="line">&#125; while (ret &lt;= 0 &amp;&amp; errno == EAGAIN &amp;&amp; sapi_cli_select(STDOUT_FILENO TSRMLS_CC));</span><br><span class="line"></span><br><span class="line">if (ret &lt;= 0) &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return ret;</span><br><span class="line">#else</span><br><span class="line">ret = fwrite(str, 1, MIN(str_length, 16384), stdout);</span><br><span class="line">return ret;</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line">/* &#125;&#125;&#125; */</span><br></pre></td></tr></table></figure><p>我们都知道输出到控制台属于标准输出那肯定就是调用了write这个函数了</p><p>c语言的write函数是可以直接把内容输出到控制台的，至此，一个大概的流程就走完了，当然中间还有很多没有讲得很清楚的地方或许还有有错的地方，需要再看下文档，再梳理完善。</p><p>参考资料</p><ol><li><a href="https://github.com/php/php-src/tree/PHP-5.6.40" target="_blank" rel="noopener">https://github.com/php/php-src/tree/PHP-5.6.40</a></li><li><a href="http://www.php-internals.com/" target="_blank" rel="noopener">http://www.php-internals.com/</a></li></ol>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/27/php-cli/#disqus_thread</comments>
    </item>
    
    <item>
      <title>php内存管理与资源管理</title>
      <link>http://yoursite.com/2019/05/26/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</link>
      <guid>http://yoursite.com/2019/05/26/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</guid>
      <pubDate>Sun, 26 May 2019 08:18:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;php内存管理与资源管理&quot;&gt;&lt;a href=&quot;#php内存管理与资源管理&quot; class=&quot;headerlink&quot; title=&quot;php内存管理与资源管理&quot;&gt;&lt;/a&gt;php内存管理与资源管理&lt;/h2&gt;&lt;h3 id=&quot;一-内存管理&quot;&gt;&lt;a href=&quot;#一-内存管理&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="php内存管理与资源管理"><a href="#php内存管理与资源管理" class="headerlink" title="php内存管理与资源管理"></a>php内存管理与资源管理</h2><h3 id="一-内存管理"><a href="#一-内存管理" class="headerlink" title="一.内存管理"></a>一.内存管理</h3><h5 id="1-php5-3垃圾回收机制"><a href="#1-php5-3垃圾回收机制" class="headerlink" title="1.php5.3垃圾回收机制"></a>1.php5.3垃圾回收机制</h5><p><strong>引用计数</strong></p><p><a href="https://www.php.net/manual/zh/features.gc.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/features.gc.php</a><br>在c中,<br>​    函数的参数和局部变量保存在栈上  由编译器自动分配释放<br>​    malloc函数分来内存在堆上  需要手动使用free来释放</p><p>在php中,</p><p>每个php变量存在一个叫”zval”的变量容器中。每当一个变量被赋常量值的时候，就会生成下面zval这样的变量容器，一个_zval_struct结构体。而最终垃圾回收销毁的也是这样的变量容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">typedef union _zvalue_value &#123;</span><br><span class="line">long lval;/* long value */</span><br><span class="line">double dval;/* double value */</span><br><span class="line">struct &#123;</span><br><span class="line">char *val;</span><br><span class="line">int len;</span><br><span class="line">&#125; str;</span><br><span class="line">HashTable *ht;/* hash table value */</span><br><span class="line">zend_object_value obj;</span><br><span class="line">zend_ast *ast;</span><br><span class="line">&#125; zvalue_value;</span><br><span class="line"></span><br><span class="line">struct _zval_struct &#123;</span><br><span class="line">/* Variable information */</span><br><span class="line">zvalue_value value;/* value */</span><br><span class="line">zend_uint refcount__gc;</span><br><span class="line">zend_uchar type;/* active type */</span><br><span class="line">zend_uchar is_ref__gc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>简单类型的引用计数原理<br>refcount__gc这个就是用以表示指向这个zval变量容器的变量(也称符号即symbol)个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = &quot;new string&quot;;</span><br></pre></td></tr></table></figure><p>因为$a使用了这个变量的容器，所以zval的refcount的值用xdebug_debug_zval打印出来会是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a: (refcount=1, is_ref=0)=&apos;new string&apos;</span><br></pre></td></tr></table></figure><p>把一个变量赋值给另一变量将增加引用次数(refcount).，也就当$a被赋值给其他变量的时候这个refcount会增加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = &quot;new string&quot;;</span><br><span class="line">$c = $b = $a;</span><br><span class="line">xdebug_debug_zval( &apos;a&apos; );</span><br><span class="line">unset( $b, $c );</span><br><span class="line">xdebug_debug_zval( &apos;a&apos; );</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>当然第一个打印出来的a的refcount会是3，当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 <a href="https://www.php.net/manual/zh/function.unset.php" target="_blank" rel="noopener">unset()</a>时，”refcount“就会减1，所以第二个打印出来的a的refcount会是1。变量容器在”refcount“变成0时就被销毁</p><p>垃圾回收是为了解决内存泄露的问题,内存泄露指的是在程序申请了内存使用后而没有释放,最终导致内存消耗殆尽<br>还有个名词叫做内存溢出 指的是只申请了int大的内存空间,却往里面存储long类型的数据。</p><p>这样就能保证不会产生内存泄漏了吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $a = [&apos;one&apos;];</span><br><span class="line">    $a[] = &amp;$a;</span><br><span class="line">    xdebug_debug_zval(&apos;a&apos;);</span><br><span class="line">    unset($a);</span><br><span class="line">    xdebug_debug_zval(&apos;a&apos;);</span><br></pre></td></tr></table></figure><p>第一个xdebug的结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a:</span><br><span class="line">(refcount=2, is_ref=1),</span><br><span class="line">array (size=2)</span><br><span class="line">  0 =&gt; (refcount=1, is_ref=0),string &apos;one&apos; (length=3)</span><br><span class="line">  1 =&gt; (refcount=2, is_ref=1),</span><br><span class="line">    &amp;array&lt;</span><br></pre></td></tr></table></figure><p>第二个xdebug打印出来的结果会是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a: no such symbol</span><br></pre></td></tr></table></figure><p>$a已经不在符号表了，但是数组的refcount变为的是1，还是会导致内存泄漏。这种怎么处理呢？这里就要讲下一个概念了：</p><p><strong>回收周期</strong></p><p>这是php手册中关于回收周期的图</p><p><img src="https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-gc-algorithm.png" alt=""></p><p>我们使用一个unset操作想清除这个变量所占的内存时（可能只是引用计数减一），会从当前符号的哈希表中删除变量名对应的项， 在所有的操作执行完后，并对从符号表中删除的项调用一个析构函数，临时变量会调用zval_dtor，一般的变量会调用zval_ptr_dtor。</p><p>zval_ptr_dtor会做的事情就是：如果变量的引用计数为1，即减一后引用计数为0，直接清除变量。如果当前变量如果被缓存，则需要清除缓存；如果变量的引用计数大于1，即减一后引用计数大于0，则将变量放入垃圾列表。如果变量存在引用，则去掉其引用。</p><p>垃圾列表满时（10000个gc_root_buffer内存空间），调用gc_collect_cycles函数</p><p>步骤 B ，算法使用深度优先搜索查找所有可能的根，找到后将每个变量容器中的引用计数减1， 为确保不会对同一个变量容器减两次“1”，用灰色标记已减过1的。</p><p>步骤 C ，算法再一次对每个根节点使用深度优先搜索，检查每个变量容器的引用计数。 如果引用计数是 0 ，变量容器用白色来标记。如果引用次数大于0，则恢复在这个点上使用深度优先搜索而将引用计数减1的操作（即引用计数加1）， 然后将它们重新用黑色标记。</p><p>最后一步 D ，算法遍历根缓冲区以从那里删除变量容器根(zval roots)， 同时，检查是否有在上一步中被白色标记的变量容器。每个被白色标记的变量容器都被清除。</p><h5 id="2-写时复制"><a href="#2-写时复制" class="headerlink" title="2.写时复制"></a>2.写时复制</h5><p>写时复制并不是PHP独有的</p><h5 id="3-慎用-amp"><a href="#3-慎用-amp" class="headerlink" title="3.慎用&amp;"></a>3.慎用&amp;</h5><h3 id="二-资源管理"><a href="#二-资源管理" class="headerlink" title="二.资源管理"></a>二.资源管理</h3><p><strong>数据库资源为例：</strong><br>​        在java里面，会在try cache的finally结构中调用一个connection.close()去显式地关闭数据库的连接<br>​        在c++里面可以用__destruct析构函数在对象被销毁的时候来做close的操作<br>​        在php中呢？日常开发使用laravel框架的时候好像没注意到这个地方，也没有去显式地调用close方法.但肯定是有close的方法来提前释放掉这个连接的，laravel的数据库操作的实现是基于PDO来做的。<br>​        通过查阅文档<a href="https://www.php.net/manual/zh/pdo.connections.php，连接数据成功后，返回一个" target="_blank" rel="noopener">https://www.php.net/manual/zh/pdo.connections.php，连接数据成功后，返回一个</a> PDO 类的实例给脚本，此连接在 PDO 对象的生存周期中保持活动。要想关闭连接，需要销毁对象以确保所有剩余到它的引用都被删除，可以赋一个 NULL 值给对象变量。如果不明确地这么做，PHP 在脚本结束时会自动关闭连接                                                                                                                                                                                                                                                                                                                                                                                                                                         </p><p>​    那就是说php在脚本结束的时候会去自动清理数据库资源/文件等资源。在工作中我们会用到在后台长期运行的脚本，这种时候我们就需要自己去手动释放资源/内存等。</p><p>​    更详细的在 <a href="http://www.laruence.com/2012/07/25/2662.html" target="_blank" rel="noopener">http://www.laruence.com/2012/07/25/2662.html</a></p><h3 id="三-其他"><a href="#三-其他" class="headerlink" title="三.其他"></a>三.其他</h3><h5 id="1-符号表"><a href="#1-符号表" class="headerlink" title="1.符号表"></a>1.符号表</h5><p><strong>参考资料：</strong></p><p>1.php官方手册</p><p>2.<a href="http://www.php-internals.com/book/?p=chapt06/06-04-00-garbage-collection" target="_blank" rel="noopener">http://www.php-internals.com/book/?p=chapt06/06-04-00-garbage-collection</a></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/26/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-15</title>
      <link>http://yoursite.com/2019/05/24/leetcode-15/</link>
      <guid>http://yoursite.com/2019/05/24/leetcode-15/</guid>
      <pubDate>Fri, 24 May 2019 14:37:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;leetcode-15&quot;&gt;&lt;a href=&quot;#leetcode-15&quot; class=&quot;headerlink&quot; title=&quot;leetcode-15&quot;&gt;&lt;/a&gt;leetcode-15&lt;/h2&gt;&lt;p&gt;给定一个包含 &lt;em&gt;n&lt;/em&gt; 个整数的数组 &lt;code&gt;num
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="leetcode-15"><a href="#leetcode-15" class="headerlink" title="leetcode-15"></a>leetcode-15</h2><p>给定一个包含 <em>n</em> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，</em>使得 <em>a + b + c =</em> 0 ？找出所有满足条件且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>解答</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">lenN := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">var</span> res [][]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenN; i++ &#123;</span><br><span class="line">l := i + <span class="number">1</span></span><br><span class="line">r := lenN - <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> l &gt;= r &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">sum := nums[i] + nums[l] + nums[r]</span><br><span class="line"><span class="keyword">if</span> sum == <span class="number">0</span> &#123;</span><br><span class="line">tmp := []<span class="keyword">int</span>&#123;nums[i], nums[l], nums[r]&#125;</span><br><span class="line">res = <span class="built_in">append</span>(res, tmp)</span><br><span class="line">l += <span class="number">1</span></span><br><span class="line">r -= <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> nums[l] == nums[l<span class="number">-1</span>] &amp;&amp; l &lt; r &#123;</span><br><span class="line">l += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> nums[r] == nums[r+<span class="number">1</span>] &amp;&amp; l &lt; r &#123;</span><br><span class="line">r -= <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; <span class="number">0</span> &#123;</span><br><span class="line">l += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r -= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/24/leetcode-15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ubuntu</title>
      <link>http://yoursite.com/2019/05/24/ubuntu/</link>
      <guid>http://yoursite.com/2019/05/24/ubuntu/</guid>
      <pubDate>Fri, 24 May 2019 03:03:06 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;淘汰笔记本的利用&quot;&gt;&lt;a href=&quot;#淘汰笔记本的利用&quot; class=&quot;headerlink&quot; title=&quot;淘汰笔记本的利用&quot;&gt;&lt;/a&gt;淘汰笔记本的利用&lt;/h2&gt;&lt;p&gt;之前用的笔记本是dell5547，由于性能等各方面原因闲置下来了，当时还给它换了块固态硬盘，
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="淘汰笔记本的利用"><a href="#淘汰笔记本的利用" class="headerlink" title="淘汰笔记本的利用"></a>淘汰笔记本的利用</h2><p>之前用的笔记本是dell5547，由于性能等各方面原因闲置下来了，当时还给它换了块固态硬盘，买的时候还是比较贵的，感觉扔了又比较可惜，于是打算安装个linux发行版在上面做服务器。</p><p><strong>第一个问题是安装什么发行版本，centos还是ubuntu</strong></p><p>​        之前用过最多的还是centos这类的发行版，因为考虑到可以体验下gnome的桌面环境可以使用浏览器/phpstorm啥的再加上……(其实是因为安装centos遇到了显卡驱动的问题反正网上是这么说的，在安装系统时卡住了，搜了很多没有解决)。</p><p>​    对我而言redhat和debain系目前使用上最大的区别就是一个用yum来安装一个用apt-get。</p><p><strong>下载Ubuntu 18.04.2 LTS (long time support?)</strong></p><p><strong>下载ultraiso</strong> 把系统写进u盘（第一步打开镜像iso文件 第二步写入硬盘），什么？要收费？试用30天！</p><p>然后在笔记本开机的时候疯狂摁fn+f12（进入快捷选择启动盘），fn+f2进入boot引导设置界面.dell应该都是这样的，其他机型baidu/google.然后选择u盘，然后图形界面安装完成</p><p><strong>ssh</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install openssh-server</span><br><span class="line">service ssh start</span><br></pre></td></tr></table></figure><p><strong>因为是用来作服务器，所以想让它启动就进入命令行模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/grub</span><br><span class="line">把这行 GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</span><br><span class="line">改成   GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash 3&quot;</span><br><span class="line">update-grub</span><br></pre></td></tr></table></figure><p><strong>重启进入命令行模式</strong></p><p><strong>然后把笔记本盖子关上（减小功耗），ssh断了???</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/logind.conf</span><br><span class="line">HandleLidSwitch 这个变量是用来控制合上盖子的系统操作的</span><br><span class="line">我们把它的值改成 &quot;lock&quot;(锁屏)</span><br><span class="line">systemctl restart systemd-logind</span><br></pre></td></tr></table></figure><p>然后就可以让它安静地做一个服务器了，你可以在上面安装lnmp……</p><p><strong>最后一个问题，查看电量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /sys/ -name capacity -exec cat &#123;&#125; \;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/24/ubuntu/#disqus_thread</comments>
    </item>
    
    <item>
      <title>mysql查询优化</title>
      <link>http://yoursite.com/2019/05/21/mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</link>
      <guid>http://yoursite.com/2019/05/21/mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</guid>
      <pubDate>Tue, 21 May 2019 13:57:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;mysql-查询优化&quot;&gt;&lt;a href=&quot;#mysql-查询优化&quot; class=&quot;headerlink&quot; title=&quot;mysql 查询优化&quot;&gt;&lt;/a&gt;mysql 查询优化&lt;/h2&gt;&lt;h3 id=&quot;一-使用explain分析sql索引使用情况&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="mysql-查询优化"><a href="#mysql-查询优化" class="headerlink" title="mysql 查询优化"></a>mysql 查询优化</h2><h3 id="一-使用explain分析sql索引使用情况"><a href="#一-使用explain分析sql索引使用情况" class="headerlink" title="一.使用explain分析sql索引使用情况"></a>一.使用explain分析sql索引使用情况</h3><p>有如下表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `index_test` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(255) NOT NULL,</span><br><span class="line">  `age` int(11) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain SELECT * FROM `index_test` WHERE id = 1;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>index_test</td><td>const</td><td>PRIMARY</td><td>PRIMARY</td><td>4</td><td>const</td><td>1</td></tr></tbody></table><p><strong>id</strong> 唯一查询标识符</p><p><strong>select_type</strong> SIMPLE/PRIMARY/UNION/SUBQUERY</p><p><strong>table</strong> 表名</p><p><strong>type</strong> 类型</p><p>​    The type column of EXPLAIN output describes how tables are joined. In JSON-formatted output,<br>these are found as values of the access_type property. The following list describes the join types    </p><p>​    效率从高到低</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure><p>​    const 主键或者唯一索引的等值查询</p><p>​    index 会扫描所有的索引</p><p>​    ref 通过特殊查找(即不会扫描所有索引)</p><p>​    all 扫描全表</p><p>​        EXPLAIN SELECT * FROM <code>index_test</code> where <code>name</code> like ‘%a%’;</p><p>​    range 范围查询 </p><p>​        EXPLAIN SELECT * FROM <code>index_test</code> where id &gt; 1;</p><p>​        EXPLAIN SELECT * FROM <code>index_test</code> where <code>name</code> like ‘a%’;</p><p><strong>possible_keys</strong>   能够用到的索引，但可能在具体查询时并没有用到</p><p>​    eg:给上表再增加一个普通索引   ADD INDEX <code>idx_name</code> (<code>name</code>) ;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM `index_test` where id = 1 and `name` = &apos;aaa&apos;;</span><br><span class="line">这里将会看到possible_keys为PRIMARY,idx_name，但实际上key为PRIMARY</span><br></pre></td></tr></table></figure><p><strong>key</strong>   当前查询使用到的索引</p><p><strong>key_len</strong>   索引使用的字节数</p><p>​     表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到.</p><p><strong>ref</strong></p><p>​    The ref column shows which columns or constants are compared to the index named in the key<br>column to select rows from the table.    </p><p><strong>rows</strong> 需要扫描的行数</p><p>​    在实际查询过程中，此值一般越小越好</p><p><strong>Extra</strong> 额外</p><p>​    当所查询的字段在索引树上可以直接找到 会展示Using index</p><h3 id="二-其他语句查询索引使用情况"><a href="#二-其他语句查询索引使用情况" class="headerlink" title="二.其他语句查询索引使用情况"></a>二.其他语句查询索引使用情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show status like &apos;%Handler_read%&apos;;</span><br><span class="line">select * from schema_unused_indexes;</span><br></pre></td></tr></table></figure><h3 id="三-索引的最左匹配原则"><a href="#三-索引的最左匹配原则" class="headerlink" title="三.索引的最左匹配原则"></a>三.索引的最左匹配原则</h3><p><strong>1.是什么</strong></p><p>最左匹配是在复合索引中出现的概念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD INDEX `idx_col1_col2_col3` (`col1`, `col2`, `col3`) ;</span><br></pre></td></tr></table></figure><p>需要先使用最左边的索引才能继续使用第二个索引，以此类推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tbl_name WHERE col1=val1;</span><br><span class="line">SELECT * FROM tbl_name WHERE col1=val1 AND col2=val2;</span><br><span class="line"></span><br><span class="line">SELECT * FROM tbl_name WHERE col2=val2;</span><br><span class="line">SELECT * FROM tbl_name WHERE col2=val2 AND col3=val3;</span><br></pre></td></tr></table></figure><p>上面四句sql,1,2句会用到索引，而3,4句不会用到。</p><p>至于条件先后，mysql会做查询优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">explain SELECT * FROM `index_test` where age = 20 and `name` = &apos;ccc&apos;;</span><br><span class="line">explain SELECT * FROM `index_test` where `name` = &apos;ccc&apos; and age = 20;</span><br><span class="line">这两句sql的explain结果是一致的</span><br></pre></td></tr></table></figure><p><strong>2.为什么</strong></p><p>mysql的B-tree索引树的数据结构决定了构建三个字段索引的时候只能保持第一个字段有序的时候才能保证第二个有序，然后才能保证第三个有序。</p><p>那是什么样的数据结构呢？</p><p>结构猜想：</p><p>树的整棵索引树的根节点上是col1组成的B-tree树,当根节点的值相等的时候（也就是col1相等的时候）又会在此节点上再新建根节点是col2组成的B-tree树，以此类推，所以当有联合索引的查找开始的时候，先依据col1找到相对应的类似于子树的地方再根据col2,col3去查找，为什么这样就会快呢？因为在这样的树上查找到该节点的时候会用到的就是二分查找（折半查找 O(log2n)）。</p><p>有点类似于orderBy col1 orderBy col2 orderBy col3。</p><p><strong>3.引申</strong></p><p>复合索引：建立在多列上的索引</p><p>单列索引：建立在某一列上的索引</p><p>复合索引的</p><p>优点：</p><p>1.建立一个索引可以用于多处 （col1,col2）和 col1这种条件都能用到</p><p>缺点：</p><p>1.使用有局限性，最左匹配</p><p>2.插入数据后索引树建立相对单列索引肯定是更复杂的，整体而言占用的空间肯定也更大。</p><h3 id="四-其他"><a href="#四-其他" class="headerlink" title="四.其他"></a>四.其他</h3><p>1.数据库三范式</p><p>1NF：每个列原子性/不可再分</p><p>2NF：非主键字段完全依赖于主键而不是依赖于主键的一部分</p><p>3NF : 非主键字段需要直接依赖于主键而不是间接依赖</p><p>2.临时表</p><p>3.filesort</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/21/mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Laravel中的设计模式</title>
      <link>http://yoursite.com/2019/05/18/Laravel%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <guid>http://yoursite.com/2019/05/18/Laravel%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Sat, 18 May 2019 09:34:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Laravel中的设计模式&quot;&gt;&lt;a href=&quot;#Laravel中的设计模式&quot; class=&quot;headerlink&quot; title=&quot;Laravel中的设计模式&quot;&gt;&lt;/a&gt;Laravel中的设计模式&lt;/h2&gt;&lt;h4 id=&quot;一、外观-门面模式&quot;&gt;&lt;a href=&quot;#
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Laravel中的设计模式"><a href="#Laravel中的设计模式" class="headerlink" title="Laravel中的设计模式"></a>Laravel中的设计模式</h2><h4 id="一、外观-门面模式"><a href="#一、外观-门面模式" class="headerlink" title="一、外观/门面模式"></a>一、外观/门面模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层次的接口，使得子系统更加容易使用</span><br><span class="line">外部与子系统的通信是通过一个门面(Facade)对象进行</span><br></pre></td></tr></table></figure><p>​     在laravel中，我们可以通过Log::info / Cache::add/Route::get这样的静态方法来记录日志或者新增缓存或者路由定义,这一类方法的调用都可以使用一致的静态方法调用方式来调用.</p><p>以Log::info为例的运行流程</p><ol><li>config/app.php</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;aliases&apos; =&gt; [</span><br><span class="line">Log&apos;       =&gt; Illuminate\Support\Facades\Log::class,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="2"><li>vendor/laravel/framework/src/Illuminate/Support/Facades/Log.php</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace Illuminate\Support\Facades;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see \Illuminate\Log\Writer</span><br><span class="line"> */</span><br><span class="line">class Log extends Facade</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Get the registered name of the component.</span><br><span class="line">     *</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    protected static function getFacadeAccessor()</span><br><span class="line">    &#123;</span><br><span class="line">        return &apos;log&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>从上面可以看到Log里面没有info这个静态方法，然后查看extends的Facade<br>__callStatic()魔术方法 当被调用的对象没有这个static方法时就会先执行此方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public static function __callStatic($method, $args)</span><br><span class="line">    &#123;</span><br><span class="line">        $instance = static::getFacadeRoot();</span><br><span class="line"></span><br><span class="line">        if (! $instance) &#123;</span><br><span class="line">            throw new RuntimeException(&apos;A facade root has not been set.&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        switch (count($args)) &#123;</span><br><span class="line">            case 0:</span><br><span class="line">                return $instance-&gt;$method();</span><br><span class="line">            case 1:</span><br><span class="line">                return $instance-&gt;$method($args[0]);</span><br><span class="line">            case 2:</span><br><span class="line">                return $instance-&gt;$method($args[0], $args[1]);</span><br><span class="line">            case 3:</span><br><span class="line">                return $instance-&gt;$method($args[0], $args[1], $args[2]);</span><br><span class="line">            case 4:</span><br><span class="line">                return $instance-&gt;$method($args[0], $args[1], $args[2], $args[3]);</span><br><span class="line">            default:</span><br><span class="line">                return call_user_func_array([$instance, $method], $args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>那Log最终new的实例是什么呢</p></li><li><p>vendor/laravel/framework/src/Illuminate/Log/LogServiceProvider.php</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Register the service provider.</span><br><span class="line"> *</span><br><span class="line"> * @return void</span><br><span class="line"> */</span><br><span class="line">public function register()</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;app-&gt;singleton(&apos;log&apos;, function () &#123;</span><br><span class="line">        return $this-&gt;createLogger();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">/**</span><br><span class="line"> * Create the logger.</span><br><span class="line"> *</span><br><span class="line"> * @return \Illuminate\Log\Writer</span><br><span class="line"> */</span><br><span class="line">public function createLogger()</span><br><span class="line">&#123;</span><br><span class="line">    $log = new Writer(</span><br><span class="line">        new Monolog($this-&gt;channel()), $this-&gt;app[&apos;events&apos;]</span><br><span class="line">    );</span><br><span class="line">   </span><br><span class="line">    if ($this-&gt;app-&gt;hasMonologConfigurator()) &#123;</span><br><span class="line">        call_user_func($this-&gt;app-&gt;getMonologConfigurator(), $log-&gt;getMonolog());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $this-&gt;configureHandler($log);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    return $log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><p>最终调用到的就是</p><p>vendor/laravel/framework/src/Illuminate/Log/Writer.php</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Log an informational message to the logs.</span><br><span class="line"> *</span><br><span class="line"> * @param  string  $message</span><br><span class="line"> * @param  array  $context</span><br><span class="line"> * @return void</span><br><span class="line"> */</span><br><span class="line">public function info($message, array $context = [])</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;writeLog(__FUNCTION__, $message, $context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/18/Laravel%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>加密相关</title>
      <link>http://yoursite.com/2019/05/18/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%85%B3/</link>
      <guid>http://yoursite.com/2019/05/18/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%85%B3/</guid>
      <pubDate>Sat, 18 May 2019 09:34:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;加密相关&quot;&gt;&lt;a href=&quot;#加密相关&quot; class=&quot;headerlink&quot; title=&quot;加密相关&quot;&gt;&lt;/a&gt;加密相关&lt;/h2&gt;&lt;h4 id=&quot;一-对称加密&quot;&gt;&lt;a href=&quot;#一-对称加密&quot; class=&quot;headerlink&quot; title=&quot;一.对称加
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="加密相关"><a href="#加密相关" class="headerlink" title="加密相关"></a>加密相关</h2><h4 id="一-对称加密"><a href="#一-对称加密" class="headerlink" title="一.对称加密"></a>一.对称加密</h4><p>1.使用相同的密钥来进行加密解密</p><p>2.优缺点：计算小、加密快/不够安全</p><p>3.eg: AES</p><h4 id="二-非对称加密"><a href="#二-非对称加密" class="headerlink" title="二.非对称加密"></a>二.非对称加密</h4><p>1.公钥和私钥 公钥加密私钥解密/私钥加密公钥解密</p><p>2.优缺点：安全性高/加解密时间长、速度慢</p><p>3.eg:RSA</p><h4 id="三-签名-摘要"><a href="#三-签名-摘要" class="headerlink" title="三.签名/摘要"></a>三.签名/摘要</h4><p>eg:MD5</p><h4 id="四-https"><a href="#四-https" class="headerlink" title="四.https"></a>四.https</h4><p>https使用对称加密和非对称加密同时使用集合两者优点</p><p><img src="http://139.224.239.61/20190520.png" alt="1558364728133"></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/18/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%85%B3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>awk相关</title>
      <link>http://yoursite.com/2019/05/18/awk%E7%9B%B8%E5%85%B3/</link>
      <guid>http://yoursite.com/2019/05/18/awk%E7%9B%B8%E5%85%B3/</guid>
      <pubDate>Sat, 18 May 2019 09:33:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;awk相关&quot;&gt;&lt;a href=&quot;#awk相关&quot; class=&quot;headerlink&quot; title=&quot;awk相关&quot;&gt;&lt;/a&gt;awk相关&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;统计nginx access_log中访问频率排前十的ip/URL etc&lt;/p&gt;
&lt;p&gt;awk 
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="awk相关"><a href="#awk相关" class="headerlink" title="awk相关"></a>awk相关</h2><ol><li><p>统计nginx access_log中访问频率排前十的ip/URL etc</p><p>awk ‘{print $1}’ access.log | sort | uniq -c | sort -nr -k1 | head -n 10</p><p>sort 让整个文件内容按行排序  相同内容的行会聚集到相邻的位置</p><p>uniq -c  去除重复列并且把重复次数产生新的一列展示到最前面</p><p>sort -nr -k1 把第一列的结果按照数字大小倒序排列</p><p>head -n 10 展示前十条</p><p>根据日志的格式调整print的列即可获取不同结果</p></li><li><p>列出当前目录下的所有文件</p><p>ls -lR |grep -v ^d|awk ‘{print $9}’ |tr -s ‘\n’</p></li><li></li></ol>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/05/18/awk%E7%9B%B8%E5%85%B3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MySQL存储引擎和索引结构</title>
      <link>http://yoursite.com/2019/04/25/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%92%8C%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84/</link>
      <guid>http://yoursite.com/2019/04/25/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%92%8C%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84/</guid>
      <pubDate>Thu, 25 Apr 2019 13:10:47 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;一、数据结构&lt;/p&gt;
&lt;p&gt;​    MySQL的索引方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;B-tree&lt;ol&gt;
&lt;li&gt;快速查找使用等于不等于条件或者范围（&amp;gt;/&amp;lt;/BETWEEN）条件的情形。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;hash&lt;ol&gt;
&lt;li&gt;只适
        
      
      </description>
      
      <content:encoded><![CDATA[<p>一、数据结构</p><p>​    MySQL的索引方法</p><ol><li>B-tree<ol><li>快速查找使用等于不等于条件或者范围（&gt;/&lt;/BETWEEN）条件的情形。</li></ol></li><li>hash<ol><li>只适用于MySQL的MEMORY存储引擎</li></ol></li></ol><p>二、MySQL （5.6为例）不同存储引擎的索引结构差别</p><p>​    这里讨论MySQL两种主要的存储引擎InnoDB 和 MyISAM</p><ol><li>InnoDB<ol><li>每一个InnoDB都会有一个索引叫做聚集索引(<a href="https://dev.mysql.com/doc/refman/5.6/en/glossary.html#glos_clustered_index" target="_blank" rel="noopener">clustered index</a>)，通常这个索引也是主键（primary key），数据文件按主键聚集。每个索引的数据都会存在于此索引结构的树上。</li><li>每一个第二索引(Secondary Indexes)都会有一个字段来存储主键来关联上数据。</li><li>所有的InnoDB索引都是用B-trees,所有的索引记录都存在树的叶子结点。默认索引页大小为16KB。</li></ol></li><li>MyISAM<ol><li>MySQL5.6版本之后默认存储引擎为InnoDB，如果需要MyISAM则需要在建表语句中指定。</li><li>同样支持B-tree索引、不支持聚集索引、不支持HASH索引。采用非聚集索引。</li><li>Primary Key和Secondary Key在结构上是一致的。MyISAM的索引文件不同之处在于Primary Key的key要求是唯一的，而Secondary Key的key可以重复。</li><li>和InnoDB的结构不同之处在于MyISAM的每个索引树的叶子节点存储的是数据的地址，索引文件数据文件分离。</li></ol></li></ol><p>三、BTREE树搜索算法</p><p>四、其他</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/04/25/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%92%8C%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>redis-内存置换策略</title>
      <link>http://yoursite.com/2019/04/25/redis-%E5%86%85%E5%AD%98%E7%BD%AE%E6%8D%A2%E7%AD%96%E7%95%A5/</link>
      <guid>http://yoursite.com/2019/04/25/redis-%E5%86%85%E5%AD%98%E7%BD%AE%E6%8D%A2%E7%AD%96%E7%95%A5/</guid>
      <pubDate>Thu, 25 Apr 2019 13:10:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;redis&quot;&gt;&lt;a href=&quot;#redis&quot; class=&quot;headerlink&quot; title=&quot;redis&quot;&gt;&lt;/a&gt;redis&lt;/h1&gt;&lt;p&gt;1.数据类型&lt;/p&gt;
&lt;p&gt;​    k-v string list set zset&lt;/p&gt;
&lt;p&gt;2.redis
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>1.数据类型</p><p>​    k-v string list set zset</p><p>2.redis内存淘汰策略</p><ol><li>超出内存限制报错</li><li>淘汰最近最少未使用</li><li>从设置了过期时间中的键中淘汰最近最少未使用</li><li>随机淘汰</li><li>从设置了过期时间中的键中随机淘汰</li><li>淘汰离过期时间最近的键</li></ol><p>3.redis 持久化策略</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/04/25/redis-%E5%86%85%E5%AD%98%E7%BD%AE%E6%8D%A2%E7%AD%96%E7%95%A5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>nginx-host</title>
      <link>http://yoursite.com/2019/04/16/nginx&amp;&amp;host/</link>
      <guid>http://yoursite.com/2019/04/16/nginx&amp;&amp;host/</guid>
      <pubDate>Tue, 16 Apr 2019 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h5 id=&quot;记录一次奇怪的响应&quot;&gt;&lt;a href=&quot;#记录一次奇怪的响应&quot; class=&quot;headerlink&quot; title=&quot;记录一次奇怪的响应&quot;&gt;&lt;/a&gt;记录一次奇怪的响应&lt;/h5&gt;&lt;p&gt;在本地调预发布的一个接口    search.xxx.bz的时候，总是出现一次响应正
        
      
      </description>
      
      <content:encoded><![CDATA[<h5 id="记录一次奇怪的响应"><a href="#记录一次奇怪的响应" class="headerlink" title="记录一次奇怪的响应"></a>记录一次奇怪的响应</h5><p>在本地调预发布的一个接口    search.xxx.bz的时候，总是出现一次响应正常一次不正常的现象/搜索无果</p><p>上服务器查找nginx配置</p><p>到conf目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -type f -name &apos;*.conf&apos;|xargs grep &apos;search.xxx.bz&apos;</span><br></pre></td></tr></table></figure><p>发现一个反向代理配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen  80;</span><br><span class="line">  server_name  search.tff.bz;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">      proxy_set_header Host $proxy_host;</span><br><span class="line">      proxy_pass http://search.sss.com;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -type f -name &apos;*.conf&apos;|xargs grep &apos;search.sss.com&apos;</span><br></pre></td></tr></table></figure><p>正常nginx server 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name search.services.sss.com;</span><br><span class="line">    root  /xxxx/public;</span><br><span class="line">    access_log logs/search.sss.com.access.log  main;</span><br><span class="line">    error_log logs/search.sss.com.error.log;</span><br><span class="line">    include laravel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无异样</p><p>之前尝试过在本地ping search.sss.com 结果为127.0.0.1无异样</p><p>在机器上curl调接口也没问题</p><p>仔细检查host</p><p>发现有两个配置</p><p>search.sss.com 188.8.8.8</p><p>search.sss.com 127.0.0.1</p><p>猜想nginx 在反向代理解析host 的时候两次分别取了不同的host配置，屏蔽第一个，问题解决。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/04/16/nginx&amp;&amp;host/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sphinx安装</title>
      <link>http://yoursite.com/2018/12/17/Sphinx%E5%AE%89%E8%A3%85/</link>
      <guid>http://yoursite.com/2018/12/17/Sphinx%E5%AE%89%E8%A3%85/</guid>
      <pubDate>Mon, 17 Dec 2018 14:23:09 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;坑&lt;br&gt;1.安装Sphinx报错&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
        
      
      </description>
      
      <content:encoded><![CDATA[<p>坑<br>1.安装Sphinx报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">libsphinx.a(sphinx.o)：在函数‘xmlUnknownEncoding(void*, char const*, XML_Encoding*)’中：</span><br><span class="line">/mnt/Project/src/sphinx/src/sphinx.cpp:29116：对‘libiconv_open’未定义的引用</span><br><span class="line">libsphinx.a(sphinx.o)：在函数‘xmlUnknownEncoding(void*, char const*, XML_Encoding*)’中：</span><br><span class="line">sphinx.cpp:(.text+0x11ce)：对‘libiconv’未定义的引用</span><br><span class="line">sphinx.cpp:(.text+0x11ff)：对‘libiconv_close’未定义的引用</span><br><span class="line">collect2: 错误：ld 返回 1</span><br><span class="line">make[2]: *** [indexer] 错误 1</span><br><span class="line">make[2]: 离开目录“/mnt/Project/src/sphinx/src”</span><br><span class="line">make[1]: *** [all] 错误 2</span><br><span class="line">make[1]: 离开目录“/mnt/Project/src/sphinx/src”</span><br><span class="line">make: *** [all-recursive] 错误 1</span><br></pre></td></tr></table></figure><p>以为是没有安装libiconv，yum安装还是报错 yum -y install libevent libevent-devel</p><p>百度 </p><p>1.编译新增参数（注意这个改的是sphinx的解压包的src下的MakeFile）(推荐)</p><p>​    LIBS = -lm -lexpat -liconv -L/usr/local/lib</p><ol start="2"><li>修改configure文件，找到“#define USE_LIBICONV 1”，将注释去掉，并将1改成0。</li></ol><p>两个命令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sphinx/bin/indexer --all  //根据sphinx.conf的配置生成索引</span><br><span class="line">/usr/local/sphinx/bin/searchd  //启动搜索引擎</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/12/17/Sphinx%E5%AE%89%E8%A3%85/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sphinx 2.2.6-release 参考手册</title>
      <link>http://yoursite.com/2018/12/16/Sphinx/</link>
      <guid>http://yoursite.com/2018/12/16/Sphinx/</guid>
      <pubDate>Sun, 16 Dec 2018 14:23:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Sphinx-2-2-11-release-参考手册&quot;&gt;&lt;a href=&quot;#Sphinx-2-2-11-release-参考手册&quot; class=&quot;headerlink&quot; title=&quot;Sphinx 2.2.11-release 参考手册&quot;&gt;&lt;/a&gt;Sphinx 2
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Sphinx-2-2-11-release-参考手册"><a href="#Sphinx-2-2-11-release-参考手册" class="headerlink" title="Sphinx 2.2.11-release 参考手册"></a>Sphinx 2.2.11-release 参考手册</h1><p>免费的开源SQL全文搜索引擎</p><p>Copyright © 2001-2014 Andrew Aksyonoff</p><p>Copyright © 2008-2014 Sphinx Technologies Inc, <a href="http://sphinxsearch.com/" target="_blank" rel="noopener">http://sphinxsearch.com</a></p><p>翻译校对 Czhuyu</p><h3 id="第一章-介绍"><a href="#第一章-介绍" class="headerlink" title="第一章. 介绍"></a>第一章. 介绍</h3><h4 id="1-1-关于"><a href="#1-1-关于" class="headerlink" title="1.1. 关于"></a>1.1. 关于</h4><p>sphinx 是一个全文搜索引擎，公开发行于GPL 2.0，商业许可(例如 用于嵌入式)通过需要许可。</p><p>从技术上讲，Sphinx是一个独立的软件包提供快速的全文搜索功能的客户端软件。它特意被设计为跟SQL 数据库一体的去存储数据，并且可以简单地通过脚本语言连接。总之，Sphinx不依赖于任何特殊的数据库功能。</p><p>应用程序可以通过Sphinx的搜索守护进程searchd用以下三种连接方式：a)通过Sphinx自己实现的Mysql的网络协议(使用的一个小的SQL的子集叫做SphinxQL，这是推荐的方式)，b)通过自带的search API(SphinxAPI)或者c)通过Mysql服务的可插拔的存储引擎(SphinxSE)。</p><p>官方的原生SphinxAPI实现了PHP,Perl,Python,Ruby和Java在贡献的包里。API是非常轻量级的所以实现一个新的语言的API只需要几个小时就行。</p><p>从1.10的beta版本开始，Sphinx支持两种不同的后台索引：磁盘后台索引和实时后台索引。磁盘索引支持在线的全文索引重建，但是在线更新只支持非text的(属性)数据。实时索引支持在线的全文索引更新。上个版本只在磁盘索引中支持。</p><p>数据可以加载进磁盘索引用一个所以叫数据源。建立源可以直接从MySQL，PostgreSQL，MSSQL，ODBC compliant 数据库(Oracle等等)或者一个管道在TSV或者一个格式化的XML。新增一个数据源驱动被设计得经可能简单。实时索引，直到1.10beta版本为止，只能用SphinxQL。</p><p>就像名字一样，Sphinx是SQL Phrase Index译解缩写。是的，我知道关于CMU的Sphinx项目。</p><h5 id="1-2-Sphinx特性"><a href="#1-2-Sphinx特性" class="headerlink" title="1.2. Sphinx特性"></a>1.2. Sphinx特性</h5><p>Sphinx特性的关键是</p><ul><li>索引和搜索的高性能</li><li>先进的索引和查询工具(灵活的并且富有特性的文本分词器,查询语言，几个不同的排名模式，等等);</li><li>先进的结果集后处理（SELECT表达式，WHERE,ORDER BY,GROUP BY,HAVING等在文本搜索中）</li><li>可扩展的久经考验地用于数十亿的文档，万亿字节的数据，每秒成千上万的请求。</li><li>方便的集合SQL和XML的数据源，和SphinxQL，SphinxAPI,和SphinxSE搜索接口；</li><li>简单的可伸缩分布式搜索。</li></ul><p>扩大一点，Sphinx：</p><ul><li>拥有很高的索引速度(达到 10-15MB/每秒每个核心在内部基准上)；</li><li>拥有很高的搜索速度（达到150-250/每秒每个核心对阵1,000,000文档，1.2G的数据在内部基准上）</li><li>拥有很高的扩展性(最大的已知的聚集索引超过了3,000,000,000文档，并且最繁忙的巅峰达到了500万次查询每天)</li></ul><h4 id="2-2-编译安装Sphinx"><a href="#2-2-编译安装Sphinx" class="headerlink" title="2.2. 编译安装Sphinx"></a>2.2. 编译安装Sphinx</h4><h5 id="2-2-1-需要的工具"><a href="#2-2-1-需要的工具" class="headerlink" title="2.2.1 需要的工具"></a>2.2.1 需要的工具</h5><p>在unix上，你需要下面的工具来建立和安装Sphinx</p><ul><li>一个用来工作的c++的编译器，GNU gcc和clang是知名的用来工作。</li><li>一个好的make工具，GNU很出名用来工作</li></ul><p>在windows上面，你会需要Microsoft Visual C/C++ Studio .Net 2005 或者以上。其他的编译器/环境也是一样的工作，但目前，你需要手动建立make文件(或者其他环境的特定项目文件)</p><h5 id="2-2-2-在Linux上编译安装"><a href="#2-2-2-在Linux上编译安装" class="headerlink" title="2.2.2. 在Linux上编译安装"></a>2.2.2. 在Linux上编译安装</h5><h4 id="2-6-Sphinx-废弃项目和更改默认的配置"><a href="#2-6-Sphinx-废弃项目和更改默认的配置" class="headerlink" title="2.6. Sphinx 废弃项目和更改默认的配置"></a>2.6. Sphinx 废弃项目和更改默认的配置</h4><p>在2.2.1-beta版本我们决定开始去除一些老的功能，所有的非官方的弃用一段时间。现在我们正式通知你们关于它们。</p><p>修改如下：</p><ul><li>32位的文档id已经被废弃了。我们的二进制发行版本现在默认都在64位的documentid的基础上建立。需要注意的是它们仍然可以用32位ID索引，但是这个支持最后会被移除。事实上，它前一阵子已经被废弃了，但是现在我们只想清除它。我们没有看到用这种方式来节省服务器RAM的任何意义。</li><li>dict=crc现在已经被废弃了。它是一大串约束。最重要的一个是关键词碰撞，并且没有通配符匹配支持。你可以获取更多的有关这些约束从我们的文档。2.7</li></ul><h3 id="第三章-索引"><a href="#第三章-索引" class="headerlink" title="第三章.索引"></a>第三章.索引</h3><h4 id="3-1-数据源"><a href="#3-1-数据源" class="headerlink" title="3.1. 数据源"></a>3.1. 数据源</h4><p>需要被索引的数据可以来自非常不同的源：数据库，简单的文本数据，HTMl文件，邮箱等等。从Sphinx的视角看来，数据的索引是一个结构化文档的合集，每一个合集都会有相同的字段和属性。这一点和SQL相似的地方是每一个SQL的行对应一个文档，每一个列对应文档的字段或者属性。</p><p>由于Sphinx获得的不同的数据来源，需要不同的代码去取得数据然后准备索引。这些代码被称为数据源驱动（简单的说叫驱动或者叫数据源）.</p><p>在写这个文档的时候，现有的驱动有MySQL，PostgreSQL,MS SQL(on Windows),和ODBC.也有一类驱动叫做xmlpipe2，特殊的运行在命令行并且获取数据从它的标准输出中。看3.9 “xmlpipe2 数据源” 章节获取更多信息。在2.2.1的beta版本中tsvpipe和csvpipe数据源也搅入了进来。你可以获取更多信息从3.10”tsvpipe\csvpipe(Tab\Comma Separated Values)数据源”</p><p>索引有很多的数据来源。他们会有序地依照索引的定义规定通过非常相同的流程。所有的文档从这些源产生的灰合并起来就行他们来自单一的数据源。</p><h4 id="3-2-全文本字段"><a href="#3-2-全文本字段" class="headerlink" title="3.2.全文本字段"></a>3.2.全文本字段</h4><p>全文本字段（或者简单说是字段）是文本的内容被Sphinx索引，并且可以（快速地）被关键字搜索。</p><p>字段可以被命名，并且你可以限制你的搜索为一个字段（例如. 只通过”title”） 或者字段的子集（例如”title”和”abstract”）.Sphinx索引支持最大256个字段。但是，在2.0.1-beta版本索引被限制到了32个字段，因为并发在匹配引擎。完全的支持到256个字段在2.0.2-beta版本。</p><p>需要注意的是字段的源内容不会存储到sphinx中。你给Sphinx的文本，全文本索引（一个特殊的数据结构能够快速地被关键字搜索）建立来自于此文本。但是源文本会被丢弃掉。Sphinx假定你已经把这些内容保存到了其他的任何地方。</p><p>还有要说的是，不可能对源文本进行完全的结构重建，因为一些特殊的空格，大小写，标点符号会被丢失在索引的时候。理论上来说只有部分的被结构重建在文本里面，但是这将是一个十分缓慢的过程（尤其是如果CRC字典被使用，甚至不是保存关键字而是它们的hash）</p><h4 id="3-3-属性"><a href="#3-3-属性" class="headerlink" title="3.3. 属性"></a>3.3. 属性</h4><p>属性是每个文档关联的额外的值用来完成额外的过滤和排序在搜索过程中。</p><p>它经常被用于额外的全文索引结果基础不仅是匹配文档ID，rank，而且是其他的每个文档的值。举个例子，有可能需要用日期排序，然后是相关性，或者你需要用指定的价格区间搜索产品，或者筛选出某个作者的文章在你的博客里，或者按月分组。为了有效地做上面的这些事情，Sphinx允许附加一定数量的额外属性为每个文档，并且存储它们的值在全文本中，然后使用存储的值去过滤，排序，分组全文本匹配到的结果就变成了可能。</p><p>属性，不同于字段，不是全文索引。它们存储在索引中，但是他们不能当作全文本进行搜索，企图这样做会导致错误。</p><p>例如，不可能使用匹配表达式@column 1去匹配column为1的文档。如果column是一个熟悉，并且忽略搜索关联性工具。此外，属性返回的结果来自search daemon,而不是索引文本。</p><p>一个比较好的例子就是论坛讨论帖子的表。假定只需要标题和内容去搜索-但是有时候也需要搜索通过作者个子讨论（例如xxxxx）；或者给匹配到的结果按照post_date排序；或者用post_date按月份分组并计算每个组匹配的条数。</p><p>这个可以获得说明所有的提及的列（除了标题和内容，它们是全文本字段）作为属性，索引它们，然后用API调用设置过滤器，排序和分组。这里是一个例子。</p><p><strong>Example sphinx.conf part:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">sql_query = SELECT id, title, content, \</span><br><span class="line">    author_id, forum_id, post_date FROM my_forum_posts</span><br><span class="line">sql_attr_uint = author_id</span><br><span class="line">sql_attr_uint = forum_id</span><br><span class="line">sql_attr_timestamp = post_date</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>Example application code (in PHP)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// only search posts by author whose ID is 123</span><br><span class="line">$cl-&gt;SetFilter ( &quot;author_id&quot;, array ( 123 ) );</span><br><span class="line"></span><br><span class="line">// only search posts in sub-forums 1, 3 and 7</span><br><span class="line">$cl-&gt;SetFilter ( &quot;forum_id&quot;, array ( 1,3,7 ) );</span><br><span class="line"></span><br><span class="line">// sort found posts by posting date in descending order</span><br><span class="line">$cl-&gt;SetSortMode ( SPH_SORT_ATTR_DESC, &quot;post_date&quot; );</span><br></pre></td></tr></table></figure><h3 id="第四章-实时索引"><a href="#第四章-实时索引" class="headerlink" title="第四章. 实时索引"></a>第四章. 实时索引</h3><p>实时索引是一个新的后台让你新增，更新，或者删除文档在飞速中。实时索引在1.10-beta中加入。当你需要查询实时索引的时候你可以使用SphinxAPI,SphinxQL,或者SphinxSE，更新他们只可能通过SphinxQL在现在。完整的SphinxQL参考在第八张章节。</p><h4 id="4-1-实时索引概览"><a href="#4-1-实时索引概览" class="headerlink" title="4.1. 实时索引概览"></a>4.1. 实时索引概览</h4><p>实时索引应该声明在sphinx.conf，就像所有的其他索引类型一样。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/12/16/Sphinx/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://yoursite.com/2018/12/07/hello-world/</link>
      <guid>http://yoursite.com/2018/12/07/hello-world/</guid>
      <pubDate>Fri, 07 Dec 2018 15:45:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/12/07/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cookie &amp;&amp; Session</title>
      <link>http://yoursite.com/2018/03/16/Cookie%E5%92%8CSession/</link>
      <guid>http://yoursite.com/2018/03/16/Cookie%E5%92%8CSession/</guid>
      <pubDate>Fri, 16 Mar 2018 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;Cookie-amp-amp-Session&quot;&gt;&lt;a href=&quot;#Cookie-amp-amp-Session&quot; class=&quot;headerlink&quot; title=&quot;Cookie &amp;amp;&amp;amp; Session&quot;&gt;&lt;/a&gt;Cookie &amp;amp;&amp;amp;
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Cookie-amp-amp-Session"><a href="#Cookie-amp-amp-Session" class="headerlink" title="Cookie &amp;&amp; Session"></a>Cookie &amp;&amp; Session</h3><h4 id="一、cookie"><a href="#一、cookie" class="headerlink" title="一、cookie"></a>一、cookie</h4><ol><li><p>定义: 是一种在浏览器端储存数据并以此来跟踪和识别用户的机制，是http头的一部分</p></li><li><p>使用方法:设置cookie函数原型:</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie ( string $name [, string $value = &quot;&quot; [, int $expire = 0 [, string $path = &quot;&quot; [, string $domain = &quot;&quot; [, bool $secure = false [, bool $httponly = false ]]]]]] ) : bool</span><br></pre></td></tr></table></figure></li><li><p><strong>setcookie()</strong> 定义了 Cookie，会和剩下的 HTTP 头一起发送给客户端。 和其他 HTTP 头一样，必须在脚本产生任意输出<em>之前</em>发送 Cookie（由于协议的限制）。 请在产生任何输出之前（包括 <em><html></html></em> 和 <em><head><meta name="generator" content="Hexo 3.8.0"></head></em> 或者空格）调用本函数。</p></li><li><p>expire以秒为单位，设置一个小时的有效期即是time()+3600</p></li><li><p>一旦设置 Cookie 后，下次打开页面时可以使用 <a href="https://www.php.net/manual/zh/reserved.variables.cookies.php" target="_blank" rel="noopener">$_COOKIE</a> 读取。 Cookie 值同样也存在于 <a href="https://www.php.net/manual/zh/reserved.variables.request.php" target="_blank" rel="noopener">$_REQUEST</a>。</p></li><li><p>服务器端通过http头将cookie的信息传递到客户端里面包括了cookie的内容和生存时间</p></li><li><p>清除cookie<br>   如果未设置cookie有效期，默认情况下cookie在浏览器关闭时会清除，如果设置了有效期且想提前结束采用如下方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie( ‘name ‘, ‘zhangsan ‘,time()-1);||unset($_COOKIE[ ‘name ‘]);</span><br></pre></td></tr></table></figure></li></ol><h4 id="二、session"><a href="#二、session" class="headerlink" title="二、session"></a>二、session</h4><ol><li>定义在并发访问时由一个方法来保存某些数据.从而使你能够构建更多的定制程序 从而提高你的 web 网站的吸引力<br>一个访问者访问你的 web 网站将被分配一个唯一的 id, 就是所谓的会话 id. 这个 id 可以存储在用户端的一个cookie<br>中，也可以通过 URL 进行传递</li><li>使用方法<br>Example #1 page1.php</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// page1.php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">echo &apos;Welcome to page #1&apos;;</span><br><span class="line"></span><br><span class="line">$_SESSION[&apos;favcolor&apos;] = &apos;green&apos;;</span><br><span class="line">$_SESSION[&apos;animal&apos;]   = &apos;cat&apos;;</span><br><span class="line">$_SESSION[&apos;time&apos;]     = time();</span><br><span class="line"></span><br><span class="line">// 如果使用 cookie 方式传送会话 ID</span><br><span class="line">echo &apos;&lt;br /&gt;&lt;a href=&quot;page2.php&quot;&gt;page 2&lt;/a&gt;&apos;;</span><br><span class="line"></span><br><span class="line">// 如果不是使用 cookie 方式传送会话 ID，则使用 URL 改写的方式传送会话 ID</span><br><span class="line">echo &apos;&lt;br /&gt;&lt;a href=&quot;page2.php?&apos; . SID . &apos;&quot;&gt;page 2&lt;/a&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>请求 page1.php 页面之后， 第二个页面 page2.php 会包含会话数据。 请查阅 会话参考 获取更多关于 会话 ID 传送的信息， 在该参考页面中有关于常量 SID 的详细说明。</p><p>Example #2 page2.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// page2.php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">echo &apos;Welcome to page #2&lt;br /&gt;&apos;;</span><br><span class="line"></span><br><span class="line">echo $_SESSION[&apos;favcolor&apos;]; // green</span><br><span class="line">echo $_SESSION[&apos;animal&apos;];   // cat</span><br><span class="line">echo date(&apos;Y m d H:i:s&apos;, $_SESSION[&apos;time&apos;]);</span><br><span class="line"></span><br><span class="line">// 类似 page1.php 中的代码，你可能需要在这里处理使用 SID 的场景</span><br><span class="line">echo &apos;&lt;br /&gt;&lt;a href=&quot;page1.php&quot;&gt;page 1&lt;/a&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/16/Cookie%E5%92%8CSession/#disqus_thread</comments>
    </item>
    
    <item>
      <title>依赖注入</title>
      <link>http://yoursite.com/2017/03/16/dependency-injection/</link>
      <guid>http://yoursite.com/2017/03/16/dependency-injection/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;依赖注入(DI)指的就是当你需要实例化的类依赖于其他类的实现的时候；&lt;/p&gt;&lt;p&gt;不需要在本类中实例化所依赖的类，而是将所依赖的类通过参数的形式传入 即构造注入(构造函数)和设值注入(set方法);&lt;/p&gt;&lt;p&gt;高耦合的反例&lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;brush
        
      
      </description>
      
      <content:encoded><![CDATA[<p>依赖注入(DI)指的就是当你需要实例化的类依赖于其他类的实现的时候；</p><p>不需要在本类中实例化所依赖的类，而是将所依赖的类通过参数的形式传入 即构造注入(构造函数)和设值注入(set方法);</p><p>高耦合的反例<br></p><pre class="brush:php;toolbar:false">//高耦合<br><br>class Apple<br>{<br>​    protected $name =  ‘ ‘;<br><br>    public function <strong>construct()<br>    {<br>        $this- &gt;name =  ‘Apple ‘;<br>    }<br><br>    public function getName()<br>    {<br>        return $this- &gt;name;<br>    }<br>}<br><br>class Orange<br>{<br>​    protected $name =  ‘ ‘;<br><br>    public function </strong>construct()<br>    {<br>        $this- &gt;name =  ‘Orange ‘;<br>    }<br><br>    public function getName()<br>    {<br>        return $this- &gt;name;<br>    }<br>}<br><br>class Person<br>{<br>​    protected $likeFood =  ‘ ‘;<br><br>    public function <strong>construct()<br>    {<br>        $this- &gt;likeFood = new Orange();<br>        echo  ‘这个人喜欢吃 ‘ . $this- &gt;likeFood- &gt;getName();<br>    }<br>}<br><br>new Person();</strong></pre><p>低耦合注入</p><pre class="brush:php;toolbar:false">//低耦合实现<br>interface Fruit<br>{<br>​    public function getName();<br><br>}<br><br>class Apple implements Fruit<br>{<br>​    protected $name =  ‘ ‘;<br><br>    public function construct()<br>    {<br>        $this- &gt;name =  ‘Apple ‘;<br>    }<br><br>    public function getName()<br>    {<br>        return $this- &gt;name;<br>    }<br>}<br><br>class Orange implements Fruit<br>{<br>​    protected $name =  ‘ ‘;<br><br>    public function <strong>construct()<br>    {<br>        $this- &gt;name =  ‘Orange ‘;<br>    }<br><br>    public function getName()<br>    {<br>        return $this- &gt;name;<br>    }<br>}<br><br>class Person<br>{<br>​    public $likeFood;<br><br>    public function </strong>construct(Fruit $fruit)<br>    {<br>        echo  ‘这个人喜欢吃 ‘ . $fruit- &gt;getName();<br>    }<br>}<br><br>$apple = new Apple();<br>new Person($apple);</pre><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/dependency-injection/#disqus_thread</comments>
    </item>
    
    <item>
      <title>linux安装mysql</title>
      <link>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Mysql/</link>
      <guid>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Mysql/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;1、mysql   官网下载适合的压缩包，格式为mysql-x.x.xx-linuxxxx.tar.gz&lt;br&gt;2、解压后配置&lt;br&gt;配置帮助  ./configure –help&lt;br&gt;3、groupadd mysql&lt;br&gt;useradd –g mysql mysql&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>1、mysql   官网下载适合的压缩包，格式为mysql-x.x.xx-linuxxxx.tar.gz<br>2、解压后配置<br>配置帮助  ./configure –help<br>3、groupadd mysql<br>useradd –g mysql mysql<br>cd到mysql的解压目录<br>chown –R mysql .<br>chgrp –R mysql .<br>4、./scripts/mysql_install_db –user=mysql<br>如果提示laibaio.1的相关错误<br>yum install libaioso.1 libaio<br>5、把目录权限还给root<br>chown –R root .<br>chown –R mysql data<br>mkdir /var/run/mysqld<br>chown mysql /var/run/mysqld<br>chgrp mysql /var/run/mysqld<br>6、启动mysql<br>./bin/mysqld_safe –user=mysql &amp;<br>7、连接mysql ./bin/mysql –uroot -p<br>如果报错   建立软连接或者直接将sock文件复制过去<br>建立软连接方法<br>ln /var/lib/mysql/mysql.sock /tmp/mysql.sock<br>8、修改密码<br>update user set Password=password(你想要的密码) where Host=’localhost’ and User=  ‘root  ‘;<br>delete from user where Password=  ‘’;<br>flush privileges;</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Mysql/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-7</title>
      <link>http://yoursite.com/2017/03/16/leetcode-7/</link>
      <guid>http://yoursite.com/2017/03/16/leetcode-7/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 0px; margin-b
        
      
      </description>
      
      <content:encoded><![CDATA[<p></p><p style="box-sizing: border-box; font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 0px; margin-bottom: 10px; font-size: 24px; display: inline-block; margin-right: 0.5em;">7.&nbsp;Reverse Integer</p><p><br></p><pre class="brush:cpp;toolbar:false">func&nbsp;reverse(x&nbsp;int)&nbsp;int&nbsp;{<br>    s&nbsp;:=&nbsp;strconv.Itoa(x)<br>    rs&nbsp;:=&nbsp;&quot;&quot;<br>    j&nbsp;:=&nbsp;0<br>    if&nbsp;x&nbsp;&lt;&nbsp;0&nbsp;{<br>        j&nbsp;=&nbsp;1<br>        rs&nbsp;+=&nbsp;&quot;-&quot;<br>    }<br>    for&nbsp;i&nbsp;:=&nbsp;len(s)&nbsp;-&nbsp;1;&nbsp;i&nbsp;&gt;=&nbsp;j;&nbsp;i–&nbsp;{<br>        rs&nbsp;+=&nbsp;string(s[i])<br>    }<br>    rsi,&nbsp;_&nbsp;:=&nbsp;strconv.Atoi(rs)<br>    if&nbsp;rsi&nbsp;&gt;&nbsp;(1&lt;&lt;31)&nbsp;||&nbsp;rsi&nbsp;&lt;&nbsp;-(1&nbsp;&lt;&lt;&nbsp;31)&nbsp;{<br>        rsi&nbsp;=&nbsp;0<br>    }<br>    return&nbsp;rsi<br><br>}</pre><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/leetcode-7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>day3</title>
      <link>http://yoursite.com/2017/03/16/leetcode_bin_tree/</link>
      <guid>http://yoursite.com/2017/03/16/leetcode_bin_tree/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Binary Tree (Traverse A Tree)&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Binary Tree Preorder Traversal&lt;/p&gt;&lt;pre class=&quot;brush:cpp;toolbar:false
        
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>Binary Tree (Traverse A Tree)</strong><br></p><p><br></p><p>Binary Tree Preorder Traversal</p><pre class="brush:cpp;toolbar:false">/*<em><br>&nbsp;</em>&nbsp;Definition&nbsp;for&nbsp;a&nbsp;binary&nbsp;tree&nbsp;node.<br>&nbsp;<em>&nbsp;type&nbsp;TreeNode&nbsp;struct&nbsp;{<br>&nbsp;</em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Val&nbsp;int<br>&nbsp;<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Left&nbsp;</em>TreeNode<br>&nbsp;<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Right&nbsp;</em>TreeNode<br>&nbsp;<em>&nbsp;}<br>&nbsp;</em>/<br>func&nbsp;preorderTraversal(root&nbsp;<em>TreeNode)&nbsp;[]int&nbsp;{<br>    var&nbsp;arr&nbsp;[]int<br>    if&nbsp;root&nbsp;==&nbsp;nil&nbsp;{<br>        return&nbsp;arr<br>    }<br>    arr&nbsp;=&nbsp;append(arr,&nbsp;root.Val)<br>    arr1&nbsp;:=&nbsp;preorderTraversal(root.Left)<br>    arr&nbsp;=&nbsp;arrmerge(arr,&nbsp;arr1)<br>    arr2&nbsp;:=&nbsp;preorderTraversal(root.Right)<br>    arr&nbsp;=&nbsp;arrmerge(arr,&nbsp;arr2)<br>    return&nbsp;arr<br>}<br><br>func&nbsp;arrmerge(arr&nbsp;[]int,&nbsp;arr1&nbsp;[]int)&nbsp;[]int&nbsp;{<br>​    for&nbsp;_,&nbsp;v&nbsp;:=&nbsp;range&nbsp;arr1&nbsp;{<br>​        arr&nbsp;=&nbsp;append(arr,&nbsp;v)<br>​    }<br>​    return&nbsp;arr<br>}</em></pre><p>Binary Tree Inorder Traversal</p><pre class="brush:cpp;toolbar:false">func&nbsp;inorderTraversal(root&nbsp;TreeNode)&nbsp;[]int&nbsp;{<br>​    var&nbsp;arr&nbsp;[]int<br>​    if&nbsp;root&nbsp;==&nbsp;nil&nbsp;{<br>​        return&nbsp;arr<br>​    }<br>​    arr1&nbsp;:=&nbsp;inorderTraversal(root.Left)<br>​    arr&nbsp;=&nbsp;arrmerge(arr,&nbsp;arr1)<br>​    arr&nbsp;=&nbsp;append(arr,&nbsp;root.Val)<br>​    arr2&nbsp;:=&nbsp;inorderTraversal(root.Right)<br>​    arr&nbsp;=&nbsp;arrmerge(arr,&nbsp;arr2)<br>​    return&nbsp;arr<br>}</pre><p>Binary Tree Postorder Traversal</p><pre class="brush:cpp;toolbar:false">func&nbsp;postorderTraversal(root&nbsp;*TreeNode)&nbsp;[]int&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;arr&nbsp;[]int<br>​    if&nbsp;root&nbsp;==&nbsp;nil&nbsp;{<br>​        return&nbsp;arr<br>​    }<br>​    arr1&nbsp;:=&nbsp;postorderTraversal(root.Left)<br>​    arr&nbsp;=&nbsp;arrmerge(arr,&nbsp;arr1)<br>​    arr2&nbsp;:=&nbsp;postorderTraversal(root.Right)<br>​    arr&nbsp;=&nbsp;arrmerge(arr,&nbsp;arr2)<br>&nbsp;&nbsp;&nbsp;&nbsp;arr&nbsp;=&nbsp;append(arr,&nbsp;root.Val)<br>​    return&nbsp;arr<br>}</pre><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/leetcode_bin_tree/#disqus_thread</comments>
    </item>
    
    <item>
      <title>linux安装php</title>
      <link>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PHP/</link>
      <guid>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PHP/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;1、&amp;nbsp;&amp;nbsp;安装依赖库&lt;br&gt;&lt;/p&gt;&lt;p&gt;2、&amp;nbsp;&amp;nbsp;yum install gd zlib libxml2 libxml2-devel libjpeg libjpeg-devel libpng libpng-devel&lt;/p&gt;&lt;p&gt;3、&amp;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>1、&nbsp;&nbsp;安装依赖库<br></p><p>2、&nbsp;&nbsp;yum install gd zlib libxml2 libxml2-devel libjpeg libjpeg-devel libpng libpng-devel</p><p>3、&nbsp;&nbsp;下载php-5.6.23.tar.bz2，解压</p><p>4、&nbsp;&nbsp;cd到php解压的目录里</p><p>5、&nbsp;&nbsp;配置安装的一些参数</p><p>./configure –prefix=/usr/local/php \</p><p>–with-gd \</p><p>–enable-gd-native-ttf \</p><p>–enable-gd-jis-conv \</p><p>–with-mysql=mysqlnd \</p><p>–enable-mysqlnd \</p><p>–with-pdo-mysql=mysqlnd \</p><p>–enable-fpm\</p><p>–with-openssl</p><p>&nbsp;</p><p>&nbsp;</p><p>Curl &nbsp;&nbsp;&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>./configure –prefix=/usr/local/php7 –with-gd –enable-gd-native-ttf –enable-gd-jis-conv –with-mysql=mysqlnd –enable-mysqlnd –with-pdo-mysql=mysqlnd –enable-fpm –with-openssl –enable-mbstring –enable-tokenizer –enable-zip –with-curl</p><p>&nbsp;</p><p>&nbsp;</p><p>enable-fpm是让php作为独立的进程来运行，占用9000端口</p><p>配置注意</p><p>&nbsp;</p><p>可能会报openssl的错误</p><p>yum install openssl openssl-devel</p><p>&nbsp;</p><p>每个参数后的斜杠前是有空格的，斜杠所起的作用是连接上下两行，没有空格两个参数会连到一起就会报错了</p><p>6、&nbsp;&nbsp;make &amp;&amp;make install</p><p>这个过程中如果使用小内存的服务器可能出现php error，解决办法:</p><p>在配置的最后一行加上–disable-fileinfo</p><p>7、cd /usr/local/php</p><p>cp etc/php-fpm.conf.default etc/php-fpm.conf</p><p>cp /usr/local/src/php-5.5.13/php.ini-development ./lib/php.ini</p><p>7、&nbsp;&nbsp;启动php</p><p>./sbin/php-fpm</p><p>&nbsp;</p><p>&nbsp;</p><p>/usr/local/php7/lib/php/extensions/no-debug-non-zts-20151012</p><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PHP/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-2</title>
      <link>http://yoursite.com/2017/03/16/leetcode-2/</link>
      <guid>http://yoursite.com/2017/03/16/leetcode-2/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 0px; marg
        
      
      </description>
      
      <content:encoded><![CDATA[<p><br></p><p style="box-sizing: border-box; font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 0px; margin-bottom: 10px; font-size: 24px; display: inline-block; margin-right: 0.5em;">2.&nbsp;Add Two Numbers</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">You are given two&nbsp;<span style="box-sizing: border-box; font-weight: 700;">non-empty</span>&nbsp;linked lists representing two non-negative integers. The digits are stored in&nbsp;<span style="box-sizing: border-box; font-weight: 700;">reverse order</span>&nbsp;and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="box-sizing: border-box; font-weight: 700;">Example</span></p><pre style="box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;">Input:&nbsp;(2&nbsp;-&gt;&nbsp;4&nbsp;-&gt;&nbsp;3)&nbsp;+&nbsp;(5&nbsp;-&gt;&nbsp;6&nbsp;-&gt;&nbsp;4)Output:&nbsp;7&nbsp;-&gt;&nbsp;0&nbsp;-&gt;&nbsp;8Explanation:&nbsp;342&nbsp;+&nbsp;465&nbsp;=&nbsp;807.</pre><p><br></p><pre class="brush:cpp;toolbar:false">/*<em><br>&nbsp;</em>&nbsp;Definition&nbsp;for&nbsp;singly-linked&nbsp;list.<br>&nbsp;<em>&nbsp;type&nbsp;ListNode&nbsp;struct&nbsp;{<br>&nbsp;</em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Val&nbsp;int<br>&nbsp;<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Next&nbsp;</em>ListNode<br>&nbsp;<em>&nbsp;}<br>&nbsp;</em>/<br>func&nbsp;addTwoNumbers(l1&nbsp;<em>ListNode,&nbsp;l2&nbsp;</em>ListNode)&nbsp;<em>ListNode&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;i1&nbsp;:=&nbsp;0<br>    i2&nbsp;:=&nbsp;0<br>    p&nbsp;:=&nbsp;l1<br>    j&nbsp;:=&nbsp;0<br>    for&nbsp;{<br>        if&nbsp;p&nbsp;!=&nbsp;nil&nbsp;{<br>            i1&nbsp;+=&nbsp;p.Val&nbsp;</em>&nbsp;int(math.Pow(float64(10),&nbsp;float64(j)))<br>            j++<br>            p&nbsp;=&nbsp;p.Next<br>        }&nbsp;else&nbsp;{<br>            break<br>        }<br>    }<br>    j&nbsp;=&nbsp;0<br>    p&nbsp;=&nbsp;l2<br>    for&nbsp;{<br>        if&nbsp;p&nbsp;!=&nbsp;nil&nbsp;{<br>            i2&nbsp;+=&nbsp;p.Val&nbsp;<em>&nbsp;int(math.Pow(float64(10),&nbsp;float64(j)))<br>            j++<br>            p&nbsp;=&nbsp;p.Next<br>        }&nbsp;else&nbsp;{<br>            break<br>        }<br>    }<br>    revres&nbsp;:=&nbsp;i1&nbsp;+&nbsp;i2<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println(revres)<br>    head&nbsp;:=&nbsp;new(ListNode)<br>    p&nbsp;=&nbsp;head<br>    for&nbsp;{<br>        if&nbsp;revres&nbsp;==&nbsp;0&nbsp;{<br>            break<br>        }&nbsp;else&nbsp;{<br>            p.Val&nbsp;=&nbsp;revres&nbsp;%&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>            revres&nbsp;=&nbsp;revres&nbsp;/&nbsp;10<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;revres&nbsp;!=&nbsp;0{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;node&nbsp;:=&nbsp;new(ListNode)<br>            &nbsp;&nbsp;&nbsp;&nbsp;p.Next&nbsp;=&nbsp;node<br>            &nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.Next&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>        }<br>    }<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;l1<br>    for&nbsp;{<br>        if&nbsp;p.Next&nbsp;==&nbsp;nil&nbsp;{<br>            break<br>        }<br>        fmt.Printf(&quot;%d\t&quot;,&nbsp;p.Val)<br>        p&nbsp;=&nbsp;p.Next<br>    }<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>    return&nbsp;head<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>}</em></pre><p>&nbsp; 后面出现了位数很长的用例，所以换成采用数组来暂存单链表</p><pre class="brush:cpp;toolbar:false">func&nbsp;addTwoNumbers(l1&nbsp;ListNode,&nbsp;l2&nbsp;<em>ListNode)&nbsp;</em>ListNode&nbsp;{<br>    var&nbsp;i1&nbsp;[]int<br>    var&nbsp;i2&nbsp;[]int<br>    p&nbsp;:=&nbsp;l1<br>    for&nbsp;{<br>        if&nbsp;p&nbsp;!=&nbsp;nil&nbsp;{<br>            i1&nbsp;=&nbsp;append(i1,&nbsp;p.Val)<br>            p&nbsp;=&nbsp;p.Next<br>        }&nbsp;else&nbsp;{<br>            break<br>        }<br>    }<br>    p&nbsp;=&nbsp;l2<br>    for&nbsp;{<br>        if&nbsp;p&nbsp;!=&nbsp;nil&nbsp;{<br>            i2&nbsp;=&nbsp;append(i2,&nbsp;p.Val)<br>            p&nbsp;=&nbsp;p.Next<br>        }&nbsp;else&nbsp;{<br>            break<br>        }<br>    }<br>    head&nbsp;:=&nbsp;new(ListNode)<br>    p&nbsp;=&nbsp;head<br>    lenthi1&nbsp;:=&nbsp;len(i1)<br>    lenthi2&nbsp;:=&nbsp;len(i2)<br>    if&nbsp;lenthi1&nbsp;!=&nbsp;lenthi2&nbsp;{<br>        if&nbsp;lenthi1&nbsp;&lt;&nbsp;lenthi2&nbsp;{<br>            for&nbsp;i&nbsp;:=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;lenthi2-lenthi1;&nbsp;i++&nbsp;{<br>                i1&nbsp;=&nbsp;append(i1,&nbsp;0)<br>            }<br>        }&nbsp;else&nbsp;{<br>            for&nbsp;i&nbsp;:=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;lenthi1-lenthi2;&nbsp;i++&nbsp;{<br>                i2&nbsp;=&nbsp;append(i2,&nbsp;0)<br>            }<br>        }<br>    }<br>    lenthi1&nbsp;=&nbsp;len(i1)<br>    lenthi2&nbsp;=&nbsp;len(i2)<br>    flag&nbsp;:=&nbsp;0<br>    for&nbsp;i,&nbsp;_&nbsp;:=&nbsp;range&nbsp;i1&nbsp;{<br>        sum&nbsp;:=&nbsp;i1[i]&nbsp;+&nbsp;i2[i]<br>        if&nbsp;i&nbsp;&lt;&nbsp;lenthi1-1&nbsp;{<br>            if&nbsp;(sum)/10&nbsp;&gt;&nbsp;0&nbsp;{<br>                i1[i+1]&nbsp;+=&nbsp;1<br>            }<br>        }&nbsp;else&nbsp;{<br>            if&nbsp;(sum)/10&nbsp;&gt;&nbsp;0&nbsp;{<br>                flag&nbsp;=&nbsp;1<br>            }<br>        }<br>        p.Val&nbsp;=&nbsp;sum&nbsp;%&nbsp;10<br>        if&nbsp;i&nbsp;&lt;&nbsp;lenthi1-1&nbsp;{<br>            node&nbsp;:=&nbsp;new(ListNode)<br>            p.Next&nbsp;=&nbsp;node<br>            p&nbsp;=&nbsp;p.Next<br>        }<br>    }<br>    if&nbsp;flag&nbsp;==&nbsp;1&nbsp;{<br>        node&nbsp;:=&nbsp;new(ListNode)<br>        node.Val&nbsp;=&nbsp;1<br>        p.Next&nbsp;=&nbsp;node<br>    }<br>    return&nbsp;head<br>}</pre><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/leetcode-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>tomcat war</title>
      <link>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85jdk%20tomcat%20.war%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/</link>
      <guid>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85jdk%20tomcat%20.war%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p style=&quot;margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;&quot;&gt;一
        
      
      </description>
      
      <content:encoded><![CDATA[<p style="margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;">一、安装JDK　　</p><p style="margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;">1.下载jdk，注意下载的时候不要下载成html了，这是个坑。。。</p><p style="margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;">2.</p><p style="margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;">vim /etc/profile</p><p style="margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;">JAVA_HOME=/usr/…/jdk解压后的路径<br>PATH=$PATH:$JAVA_HOME/bin<br>CLASSPATH=.:$JAVA_HOME/lib/jt.jar:$JAVA_HOME/lib/tools.jar<br>export JAVA_HOME PATH CLASSPATH</p><p style="margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;">:wq</p><p style="margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;">source /etc/profile</p><p style="margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;">最后java -version</p><p style="margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;">3.下载tomcat，解压进入目录/bin &nbsp; ./startup.sh</p><p style="margin: 10px auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;">4.eclipse export 项目为.war格式 选择导出路径 上传到服务器webapps目录下</p><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85jdk%20tomcat%20.war%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/#disqus_thread</comments>
    </item>
    
    <item>
      <title>lnmp重启</title>
      <link>http://yoursite.com/2017/03/16/NginxPHPMysql%20%E9%87%8D%E5%90%AF%E7%AD%89%E5%91%BD%E4%BB%A4/</link>
      <guid>http://yoursite.com/2017/03/16/NginxPHPMysql%20%E9%87%8D%E5%90%AF%E7%AD%89%E5%91%BD%E4%BB%A4/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;nginx&amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;start：&amp;nbsp;&lt;/p&gt;&lt;p&gt;/usr/local/nginx/sbin/nginx&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;stop：&amp;nbsp;&lt;/p&gt;&lt;p&gt;/usr/l
        
      
      </description>
      
      <content:encoded><![CDATA[<p>nginx&nbsp;<br></p><p>&nbsp;&nbsp;</p><p>start：&nbsp;</p><p>/usr/local/nginx/sbin/nginx&nbsp;</p><p>&nbsp;</p><p>stop：&nbsp;</p><p>/usr/local/nginx/sbin/nginx&nbsp;-s&nbsp;stop&nbsp;</p><p>&nbsp;</p><p>reload：&nbsp;</p><p>/usr/local/nginx/sbin/nginx&nbsp;-s&nbsp;reload&nbsp;</p><p>&nbsp;</p><p>#<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>&nbsp;</p><p>&nbsp;</p><p>#php-fpm(fast-cgi)命令&nbsp;</p><p>&nbsp;&nbsp;</p><p>start：&nbsp;</p><p>/usr/local/php/sbin/php-fpm&nbsp;</p><p>&nbsp;</p><p>stop：&nbsp;</p><p>/bin/ps&nbsp;-ef&nbsp;|&nbsp;grep&nbsp;&#39;php-fpm&#39;&nbsp;|&nbsp;grep&nbsp;-v&nbsp;grep&nbsp;|&nbsp;cut&nbsp;-c&nbsp;9-15&nbsp;|&nbsp;xargs&nbsp;kill&nbsp;-9&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>Linux：PHP&nbsp;5.3.3&nbsp;以上版本的php-fpm的重启</p><p>&nbsp;</p><p>INT,&nbsp;TERM：立刻终止</p><p>QUIT：平滑终止</p><p>USR1：重新打开日志文件</p><p>USR2：平滑重载所有worker进程并重新载入配置和二进制模块</p><p>&nbsp;</p><p>示例：</p><p>1）php-fpm&nbsp;关闭：</p><p>kill&nbsp;-INT&nbsp;<code>cat&amp;nbsp;/usr/local/php/var/run/php-fpm.pid</code></p><p>&nbsp;</p><p>2）php-fpm&nbsp;重启：</p><p>kill&nbsp;-USR2&nbsp;<code>cat&amp;nbsp;/usr/local/php/var/run/php-fpm.pid</code></p><p>&nbsp;</p><p>查看php-fpm进程数：</p><p>ps&nbsp;aux&nbsp;|&nbsp;grep&nbsp;-c&nbsp;php-fpm</p><p>&nbsp;</p><p>#<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>&nbsp;</p><p>&nbsp;</p><p>#mysql命令&nbsp;</p><p>&nbsp;</p><p>start：&nbsp;</p><p>/etc/init.d/mysqld&nbsp;start&nbsp;</p><p>&nbsp;</p><p>stop：&nbsp;</p><p>/etc/init.d/mysqld&nbsp;stop&nbsp;</p><p>&nbsp;</p><p>restart：&nbsp;</p><p>/etc/init.d/mysqld&nbsp;restart&nbsp;</p><p>&nbsp;</p><p>#<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>&nbsp;</p><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/NginxPHPMysql%20%E9%87%8D%E5%90%AF%E7%AD%89%E5%91%BD%E4%BB%A4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>linux安装php扩展</title>
      <link>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PHP%E6%89%A9%E5%B1%95/</link>
      <guid>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PHP%E6%89%A9%E5%B1%95/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;下载扩展&amp;nbsp;&lt;a href=&quot;http://pecl.php.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pecl.php.net/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;解压扩展 进入解压后的扩展目录 执行…/php/bin/ph
        
      
      </description>
      
      <content:encoded><![CDATA[<p>下载扩展&nbsp;<a href="http://pecl.php.net/" target="_blank" rel="noopener">http://pecl.php.net/</a><br></p><p>解压扩展 进入解压后的扩展目录 执行…/php/bin/phpize</p><p>./configure –with-php-config=…/php/bin/php-config</p><p>根据错误提示安装相应的依赖</p><p>make &amp;&amp; make install</p><p>在…/php/lib/extension/no-….目录下会出现.so的文件就说明安装好了</p><p>到php.ini中增加extension=…/php/lib/ex…/xxx.so</p><p>重启php<br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PHP%E6%89%A9%E5%B1%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-1</title>
      <link>http://yoursite.com/2017/03/16/leetcode-1/</link>
      <guid>http://yoursite.com/2017/03/16/leetcode-1/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 0px; marg
        
      
      </description>
      
      <content:encoded><![CDATA[<p><br></p><p style="box-sizing: border-box; font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 0px; margin-bottom: 10px; font-size: 24px; display: inline-block; margin-right: 0.5em;">1.&nbsp;Two Sum</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">Given an array of integers, return&nbsp;<span style="box-sizing: border-box; font-weight: 700;">indices</span>&nbsp;of the two numbers such that they add up to a specific target.</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">You may assume that each input would have&nbsp;<span style="box-sizing: border-box; font-weight: 700;"><em style="box-sizing: border-box;">exactly</em></span>&nbsp;one solution, and you may not use the&nbsp;<em style="box-sizing: border-box;">same</em>&nbsp;element twice.</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="box-sizing: border-box; font-weight: 700;">Example:</span><br></p><pre style="box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;">Given&nbsp;nums&nbsp;=&nbsp;[2,&nbsp;7,&nbsp;11,&nbsp;15],&nbsp;target&nbsp;=&nbsp;9,<br>Because&nbsp;nums[0]&nbsp;+&nbsp;nums[1]&nbsp;=&nbsp;2&nbsp;+&nbsp;7&nbsp;=&nbsp;9,<br>return&nbsp;[0,&nbsp;1].</pre><pre class="brush:cpp;toolbar:false">func&nbsp;twoSum(nums&nbsp;[]int,&nbsp;target&nbsp;int)&nbsp;[]int&nbsp;{<br>    var&nbsp;arr&nbsp;[]int<br>EXIT:<br>    for&nbsp;i,&nbsp;<em>&nbsp;:=&nbsp;range&nbsp;nums&nbsp;{<br>        for&nbsp;j,&nbsp;</em>&nbsp;:=&nbsp;range&nbsp;nums&nbsp;{<br>            if&nbsp;(nums[i]+nums[j])&nbsp;==&nbsp;target&nbsp;&amp;&amp;&nbsp;i&nbsp;!=&nbsp;j&nbsp;{<br>                arr&nbsp;=&nbsp;append(arr,&nbsp;i)<br>                arr&nbsp;=&nbsp;append(arr,&nbsp;j)<br>                break&nbsp;EXIT<br>            }<br>        }<br>    }<br>    return&nbsp;arr<br>}</pre><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/leetcode-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一次完整的请求过程</title>
      <link>http://yoursite.com/2017/03/16/%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</link>
      <guid>http://yoursite.com/2017/03/16/%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/engeng/articles/5959335.html&quot; target=&quot;_blank&quot;&gt;浏览器一次完整的请求过程&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="https://www.cnblogs.com/engeng/articles/5959335.html" target="_blank">浏览器一次完整的请求过程</a><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>leetcode-4</title>
      <link>http://yoursite.com/2017/03/16/leetcode-4/</link>
      <guid>http://yoursite.com/2017/03/16/leetcode-4/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 0px; margin-b
        
      
      </description>
      
      <content:encoded><![CDATA[<p></p><p style="box-sizing: border-box; font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 0px; margin-bottom: 10px; font-size: 24px; display: inline-block; margin-right: 0.5em;">3.&nbsp;Longest Substring Without Repeating Characters</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">Given a string, find the length of the&nbsp;<span style="box-sizing: border-box; font-weight: 700;">longest substring</span>&nbsp;without repeating characters.<br></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="box-sizing: border-box; font-weight: 700;">Examples:</span></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">Given&nbsp;<code style="box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px;">&quot;abcabcbb&quot;</code>, the answer is&nbsp;<code style="box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px;">&quot;abc&quot;</code>, which the length is 3.</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">Given&nbsp;<code style="box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px;">&quot;bbbbb&quot;</code>, the answer is&nbsp;<code style="box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px;">&quot;b&quot;</code>, with the length of 1.</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">Given&nbsp;<code style="box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px;">&quot;pwwkew&quot;</code>, the answer is&nbsp;<code style="box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px;">&quot;wke&quot;</code>, with the length of 3. Note that the answer must be a&nbsp;<span style="box-sizing: border-box; font-weight: 700;">substring</span>,&nbsp;<code style="box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px;">&quot;pwke&quot;</code>&nbsp;is a&nbsp;<em style="box-sizing: border-box;">subsequence</em>&nbsp;and not a substring.</p><pre class="brush:cpp;toolbar:false">func&nbsp;lengthOfLongestSubstring(s&nbsp;string)&nbsp;int&nbsp;{<br>    arr&nbsp;:=&nbsp;make(map[rune]int)<br>    start&nbsp;:=&nbsp;0<br>    maxlen&nbsp;:=&nbsp;0<br>    for&nbsp;i,&nbsp;v&nbsp;:=&nbsp;range&nbsp;[]rune(s)&nbsp;{<br>        if&nbsp;pre,&nbsp;ok&nbsp;:=&nbsp;arr[v];&nbsp;ok&nbsp;&amp;&amp;&nbsp;pre&nbsp;&gt;=&nbsp;start&nbsp;{<br>            start&nbsp;=&nbsp;pre&nbsp;+&nbsp;1<br>        }<br>        if&nbsp;i-start+1&nbsp;&gt;&nbsp;maxlen&nbsp;{<br>            maxlen&nbsp;=&nbsp;i&nbsp;-&nbsp;start&nbsp;+&nbsp;1<br>        }<br>        arr[v]&nbsp;=&nbsp;i<br>    }<br>    return&nbsp;maxlen<br>}</pre><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/leetcode-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>写时复制和引用计数</title>
      <link>http://yoursite.com/2017/03/16/%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E5%92%8C%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/</link>
      <guid>http://yoursite.com/2017/03/16/%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E5%92%8C%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/phpcoder/p/4462210.html&quot; target=&quot;_blank&quot; title=&quot;http://www.cnblogs.com/phpcoder/p/4462210.html&quot;&gt;ht
        
      
      </description>
      
      <content:encoded><![CDATA[<p></p><p><a href="http://www.cnblogs.com/phpcoder/p/4462210.html" target="_blank" title="http://www.cnblogs.com/phpcoder/p/4462210.html">http://www.cnblogs.com/phpcoder/p/4462210.html</a><br></p><audio controls="controls" style="display: none;"></audio><p></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E5%92%8C%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>linux安装nginx</title>
      <link>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/</link>
      <guid>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;1.到nginx.org下载&lt;br&gt;​    wget &lt;a href=&quot;http://nginx.org/download/nginx-1.10.0.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://nginx.org/downl
        
      
      </description>
      
      <content:encoded><![CDATA[<p>1.到nginx.org下载<br>​    wget <a href="http://nginx.org/download/nginx-1.10.0.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.10.0.tar.gz</a><br>2.解压压缩包<br>3.环境配置<br>​    cd到解压出来的nginx目录中有configure目录的地方进行环境配置<br>​    ./configure –prefix=/usr/local/nginx<br>​    (1).如果遇到提示缺少pcre库<br>​        到<a href="http://www.pcre.org下载pcre库，if解压到/usr/local/src/pcre-source" target="_blank" rel="noopener">www.pcre.org下载pcre库，if解压到/usr/local/src/pcre-source</a><br>​    (2).1.6版本以后的版本制定pcre源码目录./configure –prefix=/usr/local/nginx<br>​        –with-pcre=/usr/local/src/pcre-source<br>​        之前的版本制定安装目录./configure –prefix=/usr/local/nginx<br>​        –with-pcre=/usr/pcre<br>4.编译安装 make &amp;&amp; make install<br>5.其他</p><p>​    启动 nginx ./sbin/nginx<br>​    重启./sbin/nginx –s reload<br>​    Exception:如果遇到80端口被httpd(Apache)占了<br>​    pkill -9 httpd<br>​    如果无法访问<br>​    检查防火墙设置</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/#disqus_thread</comments>
    </item>
    
    <item>
      <title>php内置数组排序</title>
      <link>http://yoursite.com/2017/03/16/php%E5%86%85%E7%BD%AE%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</link>
      <guid>http://yoursite.com/2017/03/16/php%E5%86%85%E7%BD%AE%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
      </description>
      
      <comments>http://yoursite.com/2017/03/16/php%E5%86%85%E7%BD%AE%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>基本排序算法</title>
      <link>http://yoursite.com/2017/03/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <guid>http://yoursite.com/2017/03/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;使用四种基本的排序方法对生成的1000个随机数进行排序，比较执行时间&quot;&gt;&lt;a href=&quot;#使用四种基本的排序方法对生成的1000个随机数进行排序，比较执行时间&quot; class=&quot;headerlink&quot; title=&quot;使用四种基本的排序方法对生成的1000个随机数进
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="使用四种基本的排序方法对生成的1000个随机数进行排序，比较执行时间"><a href="#使用四种基本的排序方法对生成的1000个随机数进行排序，比较执行时间" class="headerlink" title="使用四种基本的排序方法对生成的1000个随机数进行排序，比较执行时间"></a>使用四种基本的排序方法对生成的1000个随机数进行排序，比较执行时间</h4><h3 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$s=microtime();//记录开始时间</span><br><span class="line"></span><br><span class="line">for($i=0;$i=1000;$i++)&#123;</span><br><span class="line">  $a[$i] = mt_rand(0,1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//冒泡排序</span><br><span class="line">for($j=0;$j&lt;999;$j++)&#123;</span><br><span class="line">  for($k=0;$k&lt;999-$j;$k++)&#123;</span><br><span class="line">  if($a[$k]&gt;$a[$k+1])&#123;</span><br><span class="line">  $temp = $a[$k];</span><br><span class="line">  $a[$k] = $a[$k+1];</span><br><span class="line">  $a[$k+1] = $temp;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for($i=0;$i&lt;1000;$i++)&#123;</span><br><span class="line">  echo $a[$i].&apos;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$e = microtime();//记录结束时间</span><br><span class="line">echo &apos;&lt;br/&gt;&apos;;</span><br><span class="line">echo $e-$s;</span><br></pre></td></tr></table></figure><h3 id="二、简单选择排序"><a href="#二、简单选择排序" class="headerlink" title="二、简单选择排序"></a>二、简单选择排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for($i=0;$i&lt;999;$i++)&#123;</span><br><span class="line">  for($j=$i+1;$j&lt;1000;$j++)&#123;</span><br><span class="line">  if($a[$j]&lt;$a[$i])&#123;</span><br><span class="line">  $temp = $a[$j];</span><br><span class="line">  $a[$j] = $a[$i];</span><br><span class="line">  $a[$i] = $temp;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、直接插入排序"><a href="#三、直接插入排序" class="headerlink" title="三、直接插入排序"></a>三、直接插入排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for($i=1;$i&lt;1000;$i++)&#123;</span><br><span class="line">  if($a[$i]&lt;$a[$i-1])&#123;</span><br><span class="line">  $j = $i-1;</span><br><span class="line">  $temp = $a[$i];</span><br><span class="line">  for($j;$j&gt;=0&amp;amp;&amp;amp;$a[$j]&gt;$temp;$j--)&#123;</span><br><span class="line">  $a[$j+1] = $a[$j];</span><br><span class="line">  &#125;</span><br><span class="line">  $a[$j+1] = $temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、快速排序"><a href="#四、快速排序" class="headerlink" title="四、快速排序"></a>四、快速排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function qsort($left,$right)&#123;</span><br><span class="line">    if($left&gt;$right)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    global $a;</span><br><span class="line"></span><br><span class="line">    $i=$left;</span><br><span class="line">    $j=$right;</span><br><span class="line">    $key = $i;</span><br><span class="line">    while($i&lt;$j)&#123;</span><br><span class="line">        //从右往左找到第一个小于标记的值，交换</span><br><span class="line">while($a[$j]&gt;=$a[$key]&amp;amp;&amp;amp;$j&gt;$i)$j--;</span><br><span class="line">$temp = $a[$i];</span><br><span class="line">$a[$i] = $a[$j];</span><br><span class="line">$a[$j] = $temp;</span><br><span class="line">$key = $j;</span><br><span class="line">//从左往右找到第一个大于标记的值，交换</span><br><span class="line">while($a[$i]&lt;=$a[$key]&amp;amp;&amp;amp;$i&lt;$j)$i++;</span><br><span class="line">$temp = $a[$i];</span><br><span class="line">$a[$i] = $a[$j];</span><br><span class="line">$a[$j] = $temp;</span><br><span class="line">$key = $i;</span><br><span class="line">&#125;</span><br><span class="line">//递归调用</span><br><span class="line">qsort($left,$i-1);</span><br><span class="line">qsort($i+1,$right);</span><br><span class="line">qsort(0,999);</span><br></pre></td></tr></table></figure><h3 id="多次测试结果"><a href="#多次测试结果" class="headerlink" title="多次测试结果"></a>多次测试结果</h3><p>冒泡排序0.05~0.07</p><p>简单选择0.03~0.06</p><p>直接插入0.02~0.04</p><p>快速排序0.002~0.007</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>apache</title>
      <link>http://yoursite.com/2017/03/16/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85apache%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
      <guid>http://yoursite.com/2017/03/16/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85apache%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;1.下载httpd apr apr-util pcre&lt;/p&gt;&lt;p&gt;配置安装apr .configure –with-prefix=/…./apa/apr&amp;nbsp;&lt;/p&gt;&lt;p&gt;make &amp;amp;&amp;amp; make install&lt;/p&gt;&lt;p&gt;配置安装apr-util
        
      
      </description>
      
      <content:encoded><![CDATA[<p>1.下载httpd apr apr-util pcre</p><p>配置安装apr .configure –with-prefix=/…./apa/apr&nbsp;</p><p>make &amp;&amp; make install</p><p>配置安装apr-util .configure –with-prefix=/…./apa/apr-util&nbsp;</p><p>make &amp;&amp; make install</p><p>配置安装pcre .configure –with-prefix=/…./local/pcre&nbsp;</p><p>make &amp;&amp; make install</p><p>配置安装apache httpd&nbsp;./configure –prefix=/usr/local/apache2 –with-mpm=worker –enable-cache –enable-disk-cache –enable-mem-cache –enable-file-cache –enable-nonportable-atomics –enable-mods-shared=most –enable-so –enable-rewrite –enable-ssl –with-apr=/../apr安装目录 –with-apr-util=/…/apr-util安装目录 –with-pcre=pcre安装目录</p><p>make &amp;&amp; make install</p><p>&nbsp;</p><p>php configure 参数 <a href="http://www.mamicode.com/info-detail-32029.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-32029.html</a></p><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85apache%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>git</title>
      <link>http://yoursite.com/2017/03/16/Github/</link>
      <guid>http://yoursite.com/2017/03/16/Github/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;首先有两种使用方式 1.先在git官网上建立一个git仓库，然后git clone到本地&lt;br&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.直接在本地cd进一个文件夹 git init&lt;br
        
      
      </description>
      
      <content:encoded><![CDATA[<p>首先有两种使用方式 1.先在git官网上建立一个git仓库，然后git clone到本地<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.直接在本地cd进一个文件夹 git init<br></p><p>配置用户名和email</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;git config –global user.name &#39;&#39;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;git config –global user.email <a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a></p><p>简单使用命令 &nbsp;git add .</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git status</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git commit -m &quot;The First Upload&quot;<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;git push -u origin master</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br></p><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/Github/#disqus_thread</comments>
    </item>
    
    <item>
      <title>安装laravel</title>
      <link>http://yoursite.com/2017/03/16/%E5%AE%89%E8%A3%85Laravel/</link>
      <guid>http://yoursite.com/2017/03/16/%E5%AE%89%E8%A3%85Laravel/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;一、根据官方文档需要安装几个php的扩展 Openssl/PDO/Mbstring/Tokenizer/XML&lt;br&gt;&lt;/p&gt;&lt;p&gt;二、Linux下可以使用Composer来安装Laravel&lt;/p&gt;&lt;p&gt;&amp;nbsp; 1.全局安装Composer&amp;nbsp;&lt;br&gt;&lt;/p
        
      
      </description>
      
      <content:encoded><![CDATA[<p>一、根据官方文档需要安装几个php的扩展 Openssl/PDO/Mbstring/Tokenizer/XML<br></p><p>二、Linux下可以使用Composer来安装Laravel</p><p>&nbsp; 1.全局安装Composer&nbsp;<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;curl -sS <a href="https://getcomposer.org/installer" target="_blank" rel="noopener">https://getcomposer.org/installer</a> | php<br>&nbsp;&nbsp;&nbsp;&nbsp;mv composer.phar /usr/local/bin/composer<br></p><p>&nbsp; &nbsp; &nbsp;解决更新慢的问题<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;composer config repo.packagist composer <a href="https://packagist.phpcomposer.com" target="_blank" rel="noopener">https://packagist.phpcomposer.com</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;composer –version查看是否安装成功</p><p>&nbsp; 2.利用Composer安装Laravel<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;composer global require &quot;laravel/installer&quot;<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;cd到$Home/.composer/vendor/bin目录下<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;执行 Laravel new Blog<br></p><p>&nbsp; 3.最后利用php的内置服务器<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;php artisan serve<br></p><p><br></p><p>一些收获</p><p>&nbsp; &nbsp;1.Linux方面 .tar.gz通过的是源码安装 ./configure –prefix=/usr/local/php 即指定安装路径 卸载的时候只需要删除这个目录下的东西即可</p><p>　　开机自启动</p><p>　　增加环境变量</p><p>&nbsp; &nbsp;2.php 的两种运行方式的php.ini有可能是不同的,也就是会出现你的web上面的phpinfo()和你直接用CLI执行的php -m发现扩展的开启情况是不相同的，这个时候就需要你运行CLI和web的时候所用的php.ini是同一个文件</p><p>&nbsp; &nbsp;3.Laravel</p><p>　　从laraval知道了php有一个内置的服务器。</p><p><br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/%E5%AE%89%E8%A3%85Laravel/#disqus_thread</comments>
    </item>
    
    <item>
      <title>正则</title>
      <link>http://yoursite.com/2017/03/16/%E6%AD%A3%E5%88%99%E3%80%81mb_substr/</link>
      <guid>http://yoursite.com/2017/03/16/%E6%AD%A3%E5%88%99%E3%80%81mb_substr/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;0x1&lt;/strong&gt; 爬虫过程遇到需要截取到&amp;lt;span id=&amp;quot;xhxm&amp;quot;&amp;gt;张三同学&amp;lt;/span&amp;gt;里面同学的名称&lt;br&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 1.正则解决&lt;br&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 2.通过字符串
        
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>0x1</strong> 爬虫过程遇到需要截取到&lt;span id=&quot;xhxm&quot;&gt;张三同学&lt;/span&gt;里面同学的名称<br></p><p>&nbsp; 1.正则解决<br></p><p>&nbsp; 2.通过字符串解决<br></p><p><strong>0x2</strong> 通过正则解决</p><p>&nbsp; 1.简单解决</p><p>&nbsp; &lt;span id=&quot;xhxm&quot;&gt;(.<em>)\u540c\u5b66&lt;/span&gt;</em></p><p>&nbsp;<img src="/ueditor/php/upload/image/20170515/1494855697445556.png" title="1494855697445556.png" alt="blob.png"></p><p>&nbsp; 2.零宽断言解决</p><p>&nbsp; &nbsp;&gt;(.)(?=\u540c\u5b66)</p><p>&nbsp;&nbsp;<img src="/ueditor/php/upload/image/20170515/1494856468363010.png" title="1494856468363010.png" alt="blob.png"></p><p>&nbsp; 这里使用零宽度正预测先行断言(?=exp)</p><p>&nbsp; 就是找到匹配之前的内容&nbsp;</p><p>&nbsp; (?&lt;=exp)用来找到匹配之后的东西，称为零宽度正回顾后发断言</p><p><strong>0x3</strong> 通过mb_substr解决 先匹配张三同学,然后截取字符串</p><p>&nbsp; 因为这里的header是gb2312，所以指定mb_substr的编码为gb2312<br></p><p>&nbsp; substr直接处理汉字会造成乱码的问题，可以使用mb_substr指定汉字编码方式gb2312</p><p>&nbsp;<img src="/ueditor/php/upload/image/20170515/1494853756143314.png" title="1494853756143314.png" alt="blob.png"></p><p>&nbsp; 这样就可以截取到到张三<br></p><p><strong>0x4</strong> 这不算完</p><p>&nbsp;<br></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/%E6%AD%A3%E5%88%99%E3%80%81mb_substr/#disqus_thread</comments>
    </item>
    
    <item>
      <title>最长不重复子串</title>
      <link>http://yoursite.com/2017/03/16/%E8%AE%A1%E7%AE%97%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9C%80%E5%A4%A7%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6/</link>
      <guid>http://yoursite.com/2017/03/16/%E8%AE%A1%E7%AE%97%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9C%80%E5%A4%A7%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
        
      
      </description>
      
      <content:encoded><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt "</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxLen</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  start := <span class="number">0</span></span><br><span class="line">  maxlen := <span class="number">0</span></span><br><span class="line">  lastO := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">int</span>)</span><br><span class="line">  <span class="keyword">for</span> i, v := <span class="keyword">range</span> []<span class="keyword">rune</span>(str) &#123;</span><br><span class="line">      <span class="keyword">if</span> lastI, ok := lastO[v]; ok &#123;</span><br><span class="line">         start = lastI + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i-start+<span class="number">1</span> &amp;gt; maxlen) &#123;</span><br><span class="line">         maxlen = i - start + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      lastO[v] = i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxlen</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//求字符串最大不重复子串长度</span></span><br><span class="line">  <span class="comment">//s:=  "Yes哈哈哈! "</span></span><br><span class="line">  fmt.Println(maxLen( <span class="string">"abcbcdef "</span>))</span><br><span class="line">  fmt.Println(maxLen( <span class="string">"abcdef "</span>))</span><br><span class="line">  fmt.Println(maxLen( <span class="string">"aaaaaaa "</span>))</span><br><span class="line">  fmt.Println(maxLen( <span class="string">"你说什么 "</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/%E8%AE%A1%E7%AE%97%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9C%80%E5%A4%A7%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>面试算法题</title>
      <link>http://yoursite.com/2017/03/16/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</link>
      <guid>http://yoursite.com/2017/03/16/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;pre class=&quot;brush:cpp;toolbar:false&quot;&gt;package&amp;nbsp;main&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;import&amp;nbsp;(&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;fmt&amp;quot;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nb
        
      
      </description>
      
      <content:encoded><![CDATA[<p><pre class="brush:cpp;toolbar:false">package&nbsp;main</pre></p><p>import&nbsp;(<br>&nbsp;&nbsp;&nbsp;&quot;fmt&quot;<br>&nbsp;&nbsp;&nbsp;&quot;strconv&quot;<br>&nbsp;&nbsp;&nbsp;&quot;sort&quot;<br>)</p><p>func&nbsp;filter(str&nbsp;string)&nbsp;string{<br>&nbsp;&nbsp;&nbsp;//过滤aabbbbbccc&nbsp;为abc<br>&nbsp;&nbsp;&nbsp;var&nbsp;newArr&nbsp;=&nbsp;make(map[rune]int)<br>&nbsp;&nbsp;&nbsp;s&nbsp;:=&nbsp;&quot;&quot;</p><p>&nbsp;&nbsp;&nbsp;for&nbsp;_,v&nbsp;:=&nbsp;range&nbsp;[]rune(str){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;newArr[v]&nbsp;==&nbsp;0{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newArr[v]&nbsp;=&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;+=&nbsp;string(v)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;return&nbsp;s<br>}</p><p>func&nbsp;filter2(str&nbsp;string)&nbsp;string{<br>&nbsp;&nbsp;&nbsp;//过滤aaabbbcssss为3a3bc4s<br>&nbsp;&nbsp;&nbsp;var&nbsp;newArr&nbsp;=&nbsp;make(map[rune]int)<br>&nbsp;&nbsp;&nbsp;var&nbsp;sortArr&nbsp;[]string<br>&nbsp;&nbsp;&nbsp;s&nbsp;:=&nbsp;&quot;&quot;</p><p>&nbsp;&nbsp;&nbsp;for&nbsp;_,v&nbsp;:=&nbsp;range&nbsp;[]rune(str){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortArr&nbsp;=&nbsp;append(sortArr,&nbsp;string(v))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;newArr[v]&nbsp;==&nbsp;0{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newArr[v]&nbsp;=&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newArr[v]&nbsp;+=&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;sort.Strings(sortArr)</p><p>&nbsp;&nbsp;&nbsp;for&nbsp;i,v&nbsp;:=&nbsp;range&nbsp;newArr{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;v&nbsp;==&nbsp;1&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;+=&nbsp;string(i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;+=&nbsp;strconv.Itoa(v)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;+=&nbsp;string(i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;return&nbsp;s<br>}</p><p>func&nbsp;main()&nbsp;{<br>&nbsp;&nbsp;&nbsp;fmt.Println(filter2(&quot;aabccddee&quot;))<br>}</p><p>go语言的map用for range遍历是随机的key<br></p><p>所以如果需要顺序遍历则需要先将key排序</p><p></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>http://yoursite.com/2017/03/16/HTTP%20OPTIONS/</link>
      <guid>http://yoursite.com/2017/03/16/HTTP%20OPTIONS/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;幂等和非幂等&lt;/p&gt;
&lt;p&gt;执行一次和执行很多次同样的操作是否是一样的&lt;/p&gt;
&lt;p&gt;GET/PUT/DELETE 幂等&lt;/p&gt;
&lt;p&gt;POST 非幂等&lt;/p&gt;
&lt;p&gt;301&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
        
      
      </description>
      
      <content:encoded><![CDATA[<p>幂等和非幂等</p><p>执行一次和执行很多次同样的操作是否是一样的</p><p>GET/PUT/DELETE 幂等</p><p>POST 非幂等</p><p>301</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">301 Move Permanently 是HTTP协议中的一个状态码（Status Code）。可以简单地理解为该资源已经被永久改变了位置[1]，通常会发送HTTP Location来重定向到正确的新位置。</span><br><span class="line"></span><br><span class="line">返回301状态码进行跳转被Google认为是将网站地址由 HTTP 迁移到 HTTPS 的最佳方法。</span><br><span class="line"></span><br><span class="line">被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。[19]除非额外指定，否则这个响应也是可缓存的。</span><br><span class="line">新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</span><br><span class="line">如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</span><br><span class="line">注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</span><br></pre></td></tr></table></figure><p>302</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">302 Found，原始描述短语为 Moved Temporarily ，是HTTP协议中的一个状态码(Status Code)。可以简单的理解为该资源原本确实存在，但已经被临时改变了位置；换而言之，就是请求的资源暂时驻留在不同的URI下，故而除非特别指定了缓存头部指示，该状态码不可缓存。</span><br><span class="line"></span><br><span class="line">对于服务器，通常会给浏览器发送HTTP Location头部来重定向到新的新位置。</span><br><span class="line"></span><br><span class="line">要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。[20]由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</span><br><span class="line">新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</span><br><span class="line">如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</span><br><span class="line">注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。[21]因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</span><br></pre></td></tr></table></figure><p>500</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Internal Server Error 通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</span><br></pre></td></tr></table></figure><p>502</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应</span><br></pre></td></tr></table></figure><p>504</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Gateway Timeout 作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。[62]</span><br><span class="line">注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</span><br></pre></td></tr></table></figure><p>URI 和 URL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URI 是统一资源标识符，而 URL 是统一资源定位符</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/HTTP%20OPTIONS/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2017.3</title>
      <link>http://yoursite.com/2017/03/16/2017.3/</link>
      <guid>http://yoursite.com/2017/03/16/2017.3/</guid>
      <pubDate>Thu, 16 Mar 2017 14:22:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;git &lt;a href=&quot;http://www.runoob.com/w3cnote/git-guide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.runoob.com/w3cnote/git-guide.html&lt;/a
        
      
      </description>
      
      <content:encoded><![CDATA[<p>git <a href="http://www.runoob.com/w3cnote/git-guide.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/git-guide.html</a><br>js编辑器 <a href="http://www.cnblogs.com/lhb25/p/html5-wysisyg-inline-editor.html" target="_blank" rel="noopener">http://www.cnblogs.com/lhb25/p/html5-wysisyg-inline-editor.html</a><br>JavaEE 注解和XML<a href="http://blog.csdn.net/qmw19910301/article/details/52712893" target="_blank" rel="noopener">http://blog.csdn.net/qmw19910301/article/details/52712893</a></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/03/16/2017.3/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
